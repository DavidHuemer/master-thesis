{
    "DistinctArrayIncorrect.isDistinct": "```java\n//@ requires arr != null;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < arr.length; (\\forall int j; i != j && 0 <= j && j < arr.length; arr[i] != arr[j]));\n```",
    "LastIndexOfIncorrect.lastIndexOf": "```java\n//@ requires arr != null;\n//@ ensures \\result == -1 <==> (\\forall int i; 0 <= i && i < arr.length; arr[i] != element);\n//@ ensures 0 <= \\result && \\result < arr.length ==> arr[\\result] == element && (\\forall int j; \\result < j && j < arr.length; arr[j] != element);\n```",
    "SetZero.setZero": "```\n//@ requires a != null;\n//@ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n//@ ensures \\result.length == a.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \n//@     (iBegin <= i && i <= iEnd ? \\result[i] == 0 : \\result[i] == a[i]));\n```",
    "IsAscending.isAscending": "```\n//@ requires arr != null;\n//@ ensures (\\result == true <==> arr.length < 2) || (\\result == true <==> (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i + 1]));\n```",
    "IndexOfIncorrect.find": "```\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == (\\min int j; 0 <= j && j < arr.length && arr[j] == target; j);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == -1;\n```",
    "IsAscendingIncorrect.isAscending": "```java\n//@ requires arr != null;\n//@ ensures \\result <==> arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i + 1]);\n```",
    "IsDescending.isDescending": "```java\n//@ requires arr != null;\n//@ ensures \\result == (arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] > arr[i + 1]));\n```",
    "IsDescendingIncorrect.isDescending": "```java\n//@ requires arr != null;\n//@ ensures \\result == (arr.length < 2) || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] > arr[i + 1]);\n```",
    "ReverseArrayIncorrect.reverse": "```java\n//@ requires a != null;\n//@ ensures \\result.length == a.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[a.length - 1 - i]);\n```",
    "RemoveElementsIncorrect.removeElement": "```java\n//@ requires arr != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length <= arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; (\\forall int j; 0 <= j && j < arr.length; arr[j] != b) ==> \\result[i] == arr[i]);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] == b ==> (\\forall int j; 0 <= j && j < \\result.length; \\result[j] != arr[i]));\n```",
    "ReverseArray.reverse": "```java\n//@requires a != null;\n//@ensures a.length == \\result.length;\n//@ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[a.length - 1 - i]);\n```",
    "RemoveElements.removeElement": "```java\n//@ requires arr != null;\n//@ ensures \\result.length <= arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] == b ==> (\\exists int j; 0 <= j && j < \\result.length; \\result[j] != b));\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \\result[i] != b);\n```",
    "SetZeroIncorrectLength.setZero": "```java\n//@ requires a != null;\n//@ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n//@ ensures a.length == \\result.length;\n//@ ensures (\\forall int i; 0 <= i < a.length; (iBegin <= i && i <= iEnd) ==> \\result[i] == 0);\n//@ ensures (\\forall int i; 0 <= i < a.length; (i < iBegin || i > iEnd) ==> \\result[i] == a[i]);\n```",
    "ContainsDuplicateIncorrect.containsDuplicate": "```java\n//@ requires nums != null;\n//@ ensures \\result == (\\exists int i, j; 0 <= i && i < nums.length && 0 <= j && j < nums.length && i != j; nums[i] == nums[j]);\n```",
    "ContainsDuplicate.containsDuplicate": "```\n//@ requires nums != null;\n//@ ensures \\result <==> (\\exists int i, j; 0 <= i && i < nums.length && 0 <= j && j < nums.length && i != j; nums[i] == nums[j]);\n```",
    "LastIndexOf.lastIndexOf": "```java\n//@ requires arr != null;\n//@ ensures \\result == -1 <==> (\\forall int i; 0 <= i && i < arr.length; arr[i] != element);\n//@ ensures \\result >= 0 <==> (0 <= \\result && \\result < arr.length && arr[\\result] == element && (\\forall int j; \\result < j && j < arr.length; arr[j] != element));\n```",
    "CompareArrayIncorrect.compare": "```\n//@ requires a != null && b != null;\n//@ ensures \\result == (a.length == b.length && \n//@                     (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]));\n```",
    "DistinctArray.isDistinct": "```\n//@ requires arr != null;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < arr.length; (\\forall int j; 0 <= j && j < arr.length; (i == j || arr[i] != arr[j])));\n```",
    "FindFirstZeroIncorrect.findFirstZero": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == (\\min int i; 0 <= i && i < arr.length && arr[i] == 0; i);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == -1;\n```",
    "FindFirstZero.findFirstZero": "```java\n//@ requires arr != null;\n//@ ensures \\result == -1 <==> (\\forall int i; 0 <= i && i < arr.length; arr[i] != 0);\n//@ ensures \\result != -1 <==> (0 <= \\result && \\result < arr.length && arr[\\result] == 0 && (\\forall int j; 0 <= j && j < \\result; arr[j] != 0));\n```",
    "Smallest.smallest": "```\n//@ requires a != null;\n//@ ensures (\\result == -1 && a.length == 0) || (\\result != -1 && a.length > 0 && (\\forall int i; 0 <= i && i < a.length; \\result <= a[i]));\n```",
    "BubbleSort.bubbleSort": "```\n//@ requires arr != null;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] <= \\result[i + 1]);\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < \\result.length; arr[i] == \\result[j]));\n```",
    "BiggestIncorrect.biggest": "```\n//@ requires a != null;\n//@ ensures (\\result == -1) <==> (a.length == 0);\n//@ ensures (\\result >= 0 && \\result < a.length) ==> (\\forall int i; 0 <= i && i < a.length; a[\\result] >= a[i]);\n```",
    "CombineArrayIncorrect.combine": "```\n//@ requires a != null && b != null;\n//@ ensures \\result.length == a.length + b.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i]);\n//@ ensures (\\forall int j; 0 <= j && j < b.length; \\result[a.length + j] == b[j]);\n```",
    "Biggest.biggest": "```java\n//@ requires a != null;\n//@ ensures (a.length == 0) ==> (\\result == -1);\n//@ ensures (a.length > 0) ==> (\\exists int i; 0 <= i && i < a.length; \\result == a[i] && (\\forall int j; 0 <= j && j < a.length; \\result >= a[j]));\n```",
    "AddCorrect.add": "```java\n//@ requires true;\n//@ ensures \\result == a + b;\n```",
    "IsCommonFactorIncorrect.isCommonFactor": "```\n//@ requires factor >= 1;\n//@ ensures \\result <==> (a % factor == 0) && (b % factor == 0);\n//@ signals (IllegalArgumentException e) factor < 1;\n```",
    "SmallestIncorrect.smallest": "```\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (\\exists int i; 0 <= i && i < a.length; \\result == a[i] && (\\forall int j; 0 <= j && j < a.length; a[j] >= \\result));\n```",
    "AddIncorrect.add": "```java\n//@ requires true;\n//@ ensures \\result == a + b;\n```",
    "IsCommonFactor.isCommonFactor": "```\n//@ requires factor >= 1;\n//@ ensures \\result == (a % factor == 0 && b % factor == 0);\n//@ signals (IllegalArgumentException e) factor < 1;\n```",
    "IndexOf.find": "```\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == (\\min int i; 0 <= i && i < arr.length && arr[i] == target; i);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == -1;\n```",
    "AddWithMax.addWithMax": "```java\n//@ requires true;\n//@ ensures \\result == a + b;\n//@ signals (IllegalArgumentException e) a + b > 2000;\n```",
    "AddWithMaxIncorrect.addWithMax": "```\n//@ requires true;\n//@ ensures \\result == a + b;\n//@ signals (IllegalArgumentException e) a + b > 2000;\n```",
    "DartIncorrect.calculateScore": "```\n//@ requires 1 <= number && number <= 20;\n//@ requires 1 <= region && region <= 3;\n//@ requires currentScore >= 0;\n//@ ensures (\\result == currentScore - number * region && \\result >= 0) || \\result == currentScore;\n//@ signals (IllegalArgumentException e) number < 1 || number > 20 || region < 1 || region > 3;\n```",
    "DivideIncorrect.divide": "```java\n//@ requires b != 0;\n//@ ensures \\result == a / b;\n//@ signals (IllegalArgumentException e) b == 0;\n```",
    "Dart.calculateScore": "```java\n//@ requires 1 <= number && number <= 20;\n//@ requires 1 <= region && region <= 3;\n//@ requires 0 <= currentScore <= 501;\n//@ ensures (currentScore - number * region >= 0) ==> \\result == currentScore - number * region;\n//@ ensures (currentScore - number * region < 0) ==> \\result == currentScore;\n//@ signals (IllegalArgumentException e) number < 1 || number > 20 || region < 1 || region > 3;\n```",
    "MultiplyCorrect.multiply": "```\n//@ requires true;\n//@ ensures \\result == a * b;\n```",
    "MultiplyInCorrect.multiply": "```\n//@ requires true;\n//@ ensures \\result == a * b;\n```",
    "Divide.divide": "```\n//@ requires b != 0;\n//@ ensures \\result == a / b;\n//@ signals (IllegalArgumentException e) b == 0;\n```",
    "CompareArray.compare": "```\n//@ requires a != null && b != null;\n//@ ensures \\result <==> (a.length == b.length && (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]));\n```",
    "SubtractCorrect.subtract": "```\n//@ requires true;\n//@ ensures \\result == a - b;\n```",
    "SubtractInvalidOrder.subtract": "```java\n//@requires true\n//@ensures \\result == a - b\n```",
    "Conjunction.conjunctOf": "```java\n//@ requires true;\n//@ ensures \\result == (b1 && b2);\n```",
    "PowIncorrect.pow": "```\n//@ requires a >= 0 && b >= 0;\n//@ requires a <= 10 && b <= 10;\n//@ ensures (b == 0) ==> (\\result == 1);\n//@ ensures (b > 0) ==> (\\result == (\\product int i; 1 <= i && i <= b; a));\n```",
    "ConjunctionIncorrect.conjunctOf": "```\n//@ requires true;\n//@ ensures \\result == (b1 && b2);\n```",
    "Disjunction.disjunctOf": "```\n//@ requires true;\n//@ ensures \\result == (b1 || b2);\n```",
    "CompareIntIncorrect.compareInt": "```\n//@requires true;\n//@ensures \\result == (a == b ? 0 : (a > b ? 1 : -1));\n```",
    "DisjunctionIncorrect.disjunctOf": "```java\n//@ requires true;\n//@ ensures \\result == b1 || b2;\n```",
    "XOR.xor": "```\n//@ requires true;\n//@ ensures \\result == (b1 != b2);\n```",
    "XORIncorrect.xor": "```java\n//@ requires true;\n//@ ensures \\result == (b1 && !b2) || (!b1 && b2);\n```",
    "CompareInt.compareInt": "```java\n//@ requires true;\n//@ ensures \\result == 0 <==> a == b;\n//@ ensures \\result > 0 <==> a > b;\n//@ ensures \\result < 0 <==> a < b;\n```",
    "RandomInt.randomInt": "```java\n//@ requires min <= max;\n//@ ensures \\result >= min && \\result <= max;\n//@ signals (IllegalArgumentException e) min > max;\n```",
    "RandomIntIncorrect.randomInt": "```\n//@ requires min <= max;\n//@ ensures min <= \\result && \\result <= max;\n//@ signals (IllegalArgumentException e) min > max;\n```",
    "StringIndexOfIncorrect.indexOf": "```java\n//@ requires s != null;\n//@ ensures (\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> (\\result >= 0 && \\result < s.length() && s.charAt(\\result) == sub && \n//@           (\\forall int j; 0 <= j && j < \\result; s.charAt(j) != sub));\n//@ ensures !(\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result == -1;\n```",
    "AbsCorrect.abs": "```java\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "StringConcatIncorrect.concat": "//@ requires a != null && b != null;\n//@ ensures \\result.equals(a + b);",
    "ComputeAreaIncorrect.computeArea": "```java\n//@ requires ax1 <= ax2 && ay1 <= ay2;\n//@ ensures \\result == ((ax2 - ax1) * (ay2 - ay1));\n```",
    "AbsIncorrect.abs": "```java\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "StringConcat.concat": "```java\n//@ requires a != null && b != null;\n//@ ensures \\result.equals(a + b);\n```",
    "IntSquareIncorrect.squareOf": "```java\n//@ requires true;\n//@ ensures \\result == x * x;\n```",
    "CreditCardIncorrect.charge": "```\n//@ requires amount >= 0;\n//@ ensures balance == \\old(balance) + amount;\n```",
    "IntSquare.squareOf": "```java\n//@ requires true;\n//@ ensures \\result == x * x;\n```",
    "CreditCard.charge": "```\n//@ requires amount >= 0;\n//@ ensures \\old(balance) + amount == balance;\n```",
    "FactorialIncorrect.factorial": "```\n//@ requires n >= 0 && n <= 10;\n//@ requires n >= 0;\n//@ requires n <= 10;\n//@ ensures \\result == (\\product int i; 1 <= i && i <= n; i);\n//@ signals (IllegalArgumentException e) n < 0 || n > 10;\n```",
    "DigitRoot.digitRoot": "```java\n//@ requires number >= 0;\n//@ ensures number == 0 ==> \\result == 0;\n//@ ensures number > 0 ==> \\result > 0 && \\result < 10;\n//@ signals (IllegalArgumentException e) number < 0;\n```",
    "LeapYear.isLeapYear": "```java\n//@ requires true;\n//@ ensures \\result == (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n```",
    "Factorial.factorial": "```\n//@ requires n >= 0 && n <= 10;\n//@ ensures \\result == (n == 0 ? 1 : (\\product int i; 1 <= i && i <= n; i));\n//@ signals (IllegalArgumentException e) n < 0 || n > 10;\n```",
    "Palindrom.isPalindrom": "```\n//@ requires s != null;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < s.length() / 2; s.charAt(i) == s.charAt(s.length() - 1 - i));\n```",
    "LeapYearIncorrect.isLeapYear": "```java\n//@ requires true;\n//@ ensures (\\result == ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0));\n```",
    "GenerateString.generateString": "```\n//@ requires length >= 0;\n//@ ensures \\result.length() == length;\n//@ ensures (\\forall int i; 0 <= i && i < length; 'a' <= \\result.charAt(i) && \\result.charAt(i) <= 'z');\n```",
    "GenerateStringIncorrectLength.generateString": "```java\n//@ requires length >= 0;\n//@ ensures \\result.length() == length;\n//@ ensures (\\forall int i; 0 <= i && i < length; 'a' <= \\result.charAt(i) && \\result.charAt(i) <= 'z');\n//@ ensures (\\forall int i; 0 <= i && i < length; \\result.charAt(i) == 'a' + (i % 26));\n```",
    "PalindromIncorrect.isPalindrom": "```\n//@ requires s != null;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < s.length() / 2; s.charAt(i) == s.charAt(s.length() - 1 - i));\n```",
    "PrimeCheck.isPrime": "```java\n//@ requires n > 1;\n//@ ensures \\result <==> (\\forall int i; 2 <= i && i < n; n % i != 0);\n```",
    "SplitString.split": "```java\n//@ requires s != null;\n//@ requires 0 <= index && index <= s.length();\n//@ ensures \\result != null;\n//@ ensures \\result.length == 2;\n//@ ensures \\result[0].equals(s.substring(0, index));\n//@ ensures \\result[1].equals(s.substring(index));\n```",
    "StringLength.length": "```java\n//@ requires s != null;\n//@ ensures \\result == s.length();\n```",
    "StringLengthIncorrect.length": "```java\n//@ requires s != null;\n//@ ensures \\result == s.length();\n```",
    "PrimeNumberGenerator.generatePrimes": "```java\n//@ requires 0 <= n && n <= 20;\n//@ ensures \\result != null;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \\result[i] > 1 && (\\forall int j; 2 <= j && j*j <= \\result[i]; \\result[i] % j != 0));\n//@ signals (IllegalArgumentException e) n < 0 || n > 20;\n```",
    "SplitStringIncorrect.split": "```jml\n//@ requires s != null;\n//@ requires 0 <= index && index <= s.length();\n//@ ensures \\result != null;\n//@ ensures \\result.length == 2;\n//@ ensures \\result[0].equals(s.substring(0, index));\n//@ ensures \\result[1].equals(s.substring(index, s.length()));\n```",
    "ReverseStringIncorrect.reverse": "```\n//@ requires s != null;\n//@ ensures \\result != null && \\result.length() == s.length() && (\\forall int i; 0 <= i && i < s.length(); \\result.charAt(i) == s.charAt(s.length() - 1 - i));\n```",
    "ReverseString.reverse": "```java\n//@ requires s != null;\n//@ ensures \\result.length() == s.length();\n//@ ensures (\\forall int i; 0 <= i && i < s.length(); \\result.charAt(i) == s.charAt(s.length() - 1 - i));\n```",
    "ExceptionTestIncorrect.test": "```java\n//@ requires true;\n//@ ensures \\result == a;\n//@ signals (IllegalArgumentException e) a > 10;\n```",
    "ExceptionTest.test": "```java\n//@ requires a <= 10;\n//@ ensures \\result == a;\n//@ signals (IllegalArgumentException) a > 10;\n```",
    "TemperaturesIncorrect.convertTemperature": "```\n//@ requires true;\n//@ ensures \\result.length == 3;\n//@ ensures \\result[0] == celsius;\n//@ ensures \\result[1] == celsius + 273.15;\n//@ ensures \\result[2] == (celsius * 9.0 / 5.0) + 32.0;\n```",
    "Temperatures.convertTemperature": "```java\n//@ requires celsius >= -273.15;\n//@ ensures \\result.length == 3;\n//@ ensures \\result[0] == celsius;\n//@ ensures \\result[1] == celsius + 273.15;\n//@ ensures \\result[2] == (celsius * 9 / 5) + 32;\n//@ signals (IllegalArgumentException e) celsius < -273.15;\n```",
    "PrimeNumberGeneratorIncorrect.generatePrimes": "```java\n//@ requires 0 <= n && n <= 20;\n//@ ensures \\result != null;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \n//@     (\\forall int j; 2 <= j && j < \\result[i]; \\result[i] % j != 0));\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] < \\result[i+1]);\n//@ signals (IllegalArgumentException) n > 20 || n < 0;\n```",
    "CopyOfRangeIncorrect.copyOfRange": "```java\n//@ requires original != null;\n//@ requires 0 <= from && from <= original.length;\n//@ requires from <= to;\n//@ ensures \\result.length == to - from;\n//@ ensures (\\forall int i; 0 <= i && i < to - from; \n//@            (from + i < original.length\n//@               ==> \\result[i] == original[from + i]) && \n//@            (from + i >= original.length \n//@               ==> \\result[i] == 0));\n//@ signals (ArrayIndexOutOfBoundsException e) from < 0 || from > original.length;\n//@ signals (IllegalArgumentException e) from > to;\n```",
    "CopyOfRange.copyOfRange": "```java\n//@ requires original != null;\n//@ requires 0 <= from && from <= original.length;\n//@ requires from <= to;\n//@ ensures \\result.length == to - from;\n//@ ensures (\\forall int i; 0 <= i && i < to - from;\n//@           (i + from < original.length ? \\result[i] == original[i + from] : \\result[i] == 0));\n//@ signals (ArrayIndexOutOfBoundsException) from < 0 || from > original.length;\n//@ signals (IllegalArgumentException) from > to;\n```",
    "CombineArray.combine": "```java\n//@ requires a != null && b != null;\n//@ ensures \\result.length == a.length + b.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i]);\n//@ ensures (\\forall int j; 0 <= j && j < b.length; \\result[a.length + j] == b[j]);\n```",
    "SubstringIncorrect.substring": "```java\n//@ requires s != null;\n//@ requires 0 <= start && start <= end && end <= s.length();\n//@ ensures \\result.equals(s.substring(start, end));\n//@ signals (IndexOutOfBoundsException e) start < 0 || end > s.length();\n//@ signals (IllegalArgumentException e) start > end;\n```",
    "BubbleSortIncorrect.bubbleSort": "```java\n//@ requires arr != null;\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] <= \\result[i + 1]);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < \\result.length; \\result[j] == arr[i]));\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; (\\exists int j; 0 <= j && j < arr.length; arr[j] == \\result[i]));\n```",
    "Pow.pow": "```java\n//@ requires a >= 0 && b >= 0;\n//@ requires a <= 10 && b <= 10;\n//@ ensures \\result == (b == 0 ? 1 : (\\product int i; 0 <= i && i < b; a));\n//@ signals (IllegalArgumentException e) a < 0 || b < 0 || a > 10 || b > 10;\n```",
    "StringIndexOf.indexOf": "```java\n//@ requires s != null;\n//@ ensures \\result == -1 <==> (\\forall int i; 0 <= i && i < s.length(); s.charAt(i) != sub);\n//@ ensures \\result != -1 <==> (0 <= \\result && \\result < s.length() && s.charAt(\\result) == sub && (\\forall int j; 0 <= j && j < \\result; s.charAt(j) != sub));\n```",
    "Withdraw.withdraw": "```java\n//@ requires balance >= 0;\n//@ requires amount >= 0;\n//@ requires amount <= balance;\n//@ ensures \\result == balance - amount;\n//@ signals (IllegalArgumentException e) amount < 0 || amount > balance || balance < 0 || balance - amount < 0;\n```",
    "PrimeCheckIncorrect.isPrime": "```java\n//@ requires n > 1;\n//@ ensures \\result == (\\forall int i; 2 <= i && i * i <= n; n % i != 0);\n```",
    "ParseBooleanIncorrect.parse": "```java\n//@ requires inputString != null;\n//@ requires (inputString.length() == 4 || inputString.length() == 5);\n//@ signals (IllegalArgumentException e) inputString == null || (inputString.length() != 4 && inputString.length() != 5);\n//@ ensures inputString.equalsIgnoreCase(\"true\") ==> \\result == true;\n//@ ensures inputString.equalsIgnoreCase(\"false\") ==> \\result == false;\n```",
    "Substring.substring": "```java\n//@ requires s != null;\n//@ requires 0 <= start && start <= end && end <= s.length();\n//@ ensures \\result.length() == end - start;\n//@ ensures (\\forall int i; 0 <= i && i < end - start; \\result.charAt(i) == s.charAt(start + i));\n//@ signals (IndexOutOfBoundsException) start < 0 || end > s.length();\n//@ signals (IllegalArgumentException) start > end;\n```",
    "ComputeArea.computeArea": "```\n//@ requires ax1 <= ax2 && ay1 <= ay2;\n//@ ensures \\result == (ax2 - ax1) * (ay2 - ay1);\n```",
    "WithdrawIncorrect.withdraw": "```java\n//@ requires balance >= 0;\n//@ requires amount >= 0;\n//@ requires amount <= balance;\n//@ ensures \\result == balance - amount;\n//@ signals (IllegalArgumentException e) amount < 0 || amount > balance || balance < 0;\n```",
    "ParseBoolean.parse": "```\n//@ requires inputString != null && (inputString.length() == 4 || inputString.length() == 5);\n//@ requires (inputString.length() == 4 ==> ((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') && (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') && (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') && (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'))) ||\n//@           (inputString.length() == 5 ==> ((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') && (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') && (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') && (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') && (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E')));\n//@ ensures (\\result == true) <==> (inputString.length() == 4 && ((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') && (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') && (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') && (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E')));\n//@ ensures (\\result == false) <==> (inputString.length() == 5 && ((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') && (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') && (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') && (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') && (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E')));\n//@ signals (IllegalArgumentException e) inputString == null || ((inputString.length() != 4 || ((inputString.charAt(0) != 't' && inputString.charAt(0) != 'T') || (inputString.charAt(1) != 'r' && inputString.charAt(1) != 'R') || (inputString.charAt(2) != 'u' && inputString.charAt(2) != 'U') || (inputString.charAt(3) != 'e' && inputString.charAt(3) != 'E'))) && (inputString.length() != 5 || ((inputString.charAt(0) != 'f' && inputString.charAt(0) != 'F') || (inputString.charAt(1) != 'a' && inputString.charAt(1) != 'A') || (inputString.charAt(2) != 'l' && inputString.charAt(2) != 'L') || (inputString.charAt(3) != 's' && inputString.charAt(3) != 'S') || (inputString.charAt(4) != 'e' && inputString.charAt(4) != 'E'))));\n```"
}