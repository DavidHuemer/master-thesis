{
    "Abs.abs": "```\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "AbsMinus.abs": "```\n//@requires true;\n//@ensures \\result == (a >= 0 ? a : -a);\n```",
    "AbsSameValue.abs": "```java\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "AddCorrect.add": "```\n//@ requires true;\n//@ ensures \\result == a + b;\n```",
    "AddIncorrect.add": "```java\n//@ requires true;\n//@ ensures \\result == a + b;\n```",
    "IntSquare.squareOf": "```\n//@ requires true;\n//@ ensures \\result == x * x;\n```",
    "IntSquareIncorrect.squareOf": "```java\n//@ requires true;\n//@ ensures \\result == x * x;\n```",
    "MultiplyCorrect.multiply": "```\n//@ requires true;\n//@ ensures \\result == a * b;\n```",
    "MultiplyInCorrect.multiply": "```java\n//@ requires true;\n//@ ensures \\result == a * b;\n```",
    "SubtractCorrect.subtract": "```java\n//@requires true\n//@ensures \\result == a - b\n```",
    "SubtractInvalidOrder.subtract": "```java\n//@ requires true;\n//@ ensures \\result == a - b;\n```",
    "CompareArray.compare": "```java\n//@ requires a != null && b != null;\n//@ ensures \\result <==> (a.length == b.length && (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]));\n```",
    "CompareArrayIncorrect.compare": "```\n//@ requires a != null && b != null;\n//@ requires a.length == b.length;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]);\n```",
    "Conjunction.conjunctOf": "```java\n//@ requires true;\n//@ ensures \\result == (b1 && b2);\n```",
    "ConjunctionIncorrect.conjunctOf": "```java\n//@ requires true;\n//@ ensures \\result == (b1 && b2);\n```",
    "Disjunction.disjunctOf": "```java\n//@ requires true;\n//@ ensures \\result == (b1 || b2);\n```",
    "DisjunctionIncorrect.disjunctOf": "```\n//@requires true\n//@ensures \\result == (b1 || b2)\n```",
    "DistinctArray.isDistinct": "```java\n//@ requires arr != null;\n//@ ensures \\result <==> (\\forall int i; 0 <= i && i < arr.length; (\\forall int j; 0 <= j && j < arr.length; i == j || arr[i] != arr[j]));\n```",
    "DistinctArrayIncorrect.isDistinct": "```\n//@ requires arr != null;\n//@ ensures \\result <==> (\\forall int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j; arr[i] != arr[j]);\n```",
    "IsAscending.isAscending": "```\n//@ requires arr != null;\n//@ ensures \\result <==> (arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i + 1]));\n```",
    "IsAscendingIncorrect.isAscending": "```java\n//@ requires arr != null;\n//@ ensures \\result == (arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i + 1]));\n```",
    "IsCommonFactor.isCommonFactor": "```java\n//@ requires factor >= 1;\n//@ ensures \\result == ((a % factor == 0) && (b % factor == 0));\n//@ signals (IllegalArgumentException e) factor < 1;\n```",
    "IsCommonFactorIncorrect.isCommonFactor": "```java\n//@ requires factor >= 1;\n//@ ensures \\result <==> (a % factor == 0 && b % factor == 0);\n//@ signals (IllegalArgumentException e) factor < 1;\n```",
    "XOR.xor": "```java\n//@ requires true;\n//@ ensures \\result == (b1 && !b2) || (!b1 && b2);\n```",
    "XORIncorrect.xor": "```java\n//@ requires true;\n//@ ensures \\result == ((b1 && !b2) || (!b1 && b2));\n```",
    "ComputeArea.computeArea": "```java\n//@ requires true;\n//@ ensures \\result == ((ax1 <= ax2 ? ax2 - ax1 : ax1 - ax2) * (ay1 <= ay2 ? ay2 - ay1 : ay1 - ay2));\n```",
    "ComputeAreaIncorrect.computeArea": "```\n//@ requires ax1 <= ax2 && ay1 <= ay2;\n//@ ensures \\result == (ax2 - ax1) * (ay2 - ay1);\n```",
    "CreditCard.charge": "```\n//@ requires amount >= 0;\n//@ ensures balance == \\old(balance) + amount;\n```",
    "CreditCardIncorrect.charge": "```\n//@ requires amount >= 0;\n//@ ensures balance == \\old(balance) + amount;\n```",
    "DigitRoot.digitRoot": "```java\n//@ requires number >= 0;\n//@ ensures \\result >= 0 && \\result <= 9;\n//@ signals (IllegalArgumentException e) number < 0;\n```",
    "GenerateString.generateString": "```java\n//@requires length >= 0\n//@ensures \\result.length() == length\n//@ensures (\\forall int i; 0 <= i && i < \\result.length(); \\result.charAt(i) >= 'a' && \\result.charAt(i) <= 'z')\n```",
    "GenerateStringIncorrectLength.generateString": "```java\n//@ requires length >= 0;\n//@ ensures \\result != null;\n//@ ensures \\result.length() == length;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length(); 'a' <= \\result.charAt(i) && \\result.charAt(i) <= 'z');\n```",
    "SetZero.setZero": "```\n//@ requires a != null;\n//@ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n//@ ensures (\\forall int i; 0 <= i && i < iBegin; \\result[i] == a[i]) &&\n//@         (\\forall int i; iBegin <= i && i <= iEnd; \\result[i] == 0) &&\n//@         (\\forall int i; iEnd < i && i < a.length; \\result[i] == a[i]);\n```",
    "SetZeroIncorrectLength.setZero": "```java\n//@ requires a != null;\n//@ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n//@ ensures (\\forall int i; iBegin <= i && i <= iEnd; \\result[i] == 0);\n//@ ensures (\\forall int i; 0 <= i && i < iBegin; \\result[i] == a[i]);\n//@ ensures (\\forall int i; iEnd < i && i < a.length; \\result[i] == a[i]);\n//@ ensures \\result.length == a.length;\n```",
    "StringLength.length": "```\n//@ requires s != null;\n//@ ensures \\result == s.length();\n```",
    "StringLengthIncorrect.length": "```java\n//@ requires s != null;\n//@ ensures \\result == s.length();\n```",
    "Temperatures.convertTemperature": "```\n//@ requires celsius * 100 >= -27315;\n//@ ensures \\result.length == 3;\n//@ ensures \\result[0] == celsius;\n//@ ensures \\result[1] * 100 == celsius * 100 + 27315;\n//@ ensures \\result[2] * 100 == (celsius * 900 / 5) + 3200;\n//@ signals (IllegalArgumentException e) celsius * 100 < -27315;\n```",
    "TemperaturesIncorrect.convertTemperature": "```java\n//@ requires true;\n//@ ensures \\result.length == 3;\n//@ ensures \\result[0] == celsius;\n//@ ensures \\result[1] == celsius + 273.15;\n//@ ensures \\result[2] == celsius * 9/5 + 32;\n```",
    "ExceptionTest.test": "```\n//@ requires true;\n//@ ensures \\result == a;\n//@ signals_only IllegalArgumentException;\n//@ signals (IllegalArgumentException e) a > 10;\n```",
    "ExceptionTestIncorrect.test": "```java\n//@ requires true;\n//@ ensures \\result == a;\n//@ signals (IllegalArgumentException) a > 10;\n```",
    "BubbleSort.bubbleSort": "```java\n//@ requires arr != null;\n//@ requires (\\forall int i; 0 <= i && i < arr.length; arr[i] == arr[i]);\n//@ ensures \\result != arr;\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < arr.length; \\result[j] == arr[i]));\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] <= \\result[i + 1]);\n```",
    "BubbleSortDesc.bubbleSort": "```java\n//@ requires arr != null;\n//@ ensures \\result != arr;\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] >= \\result[i + 1]);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < \\result.length; arr[i] == \\result[j]));\n```",
    "BubbleSortIncorrect.bubbleSort": "```\n//@ requires arr != null;\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < \\result.length; \\result[j] == arr[i]));\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] <= \\result[i + 1]);\n```",
    "ContainsDuplicate.containsDuplicate": "```java\n//@ requires nums != null;\n//@ ensures \\result == (\\exists int i, j; 0 <= i && i < nums.length && 0 <= j && j < nums.length && i != j; nums[i] == nums[j]);\n```",
    "ContainsDuplicateIncorrect.containsDuplicate": "```java\n//@ requires nums != null;\n//@ ensures \\result == (\\exists int i, j; 0 <= i && i < j && j < nums.length; nums[i] == nums[j]);\n```",
    "FindFirstZero.findFirstZero": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == (\\min int i; 0 <= i && i < arr.length && arr[i] == 0; i);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == -1;\n```",
    "FindFirstZeroIncorrect.findFirstZero": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == (\\min int j; 0 <= j && j < arr.length && arr[j] == 0; j);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == -1;\n```",
    "IndexOf.find": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == (\\min int i; 0 <= i && i < arr.length && arr[i] == target; i);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == -1;\n//@ signals (NullPointerException) arr == null;\n```",
    "IndexOfIncorrect.find": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == (\\min int j; 0 <= j && j < arr.length && arr[j] == target; j);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] != target) ==> \\result == -1;\n//@ signals (NullPointerException) arr == null;\n```",
    "Biggest.biggest": "```\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (\\exists int i; 0 <= i && i < a.length; a[i] == \\result);\n//@ ensures a.length > 0 ==> (\\forall int i; 0 <= i && i < a.length; a[i] <= \\result);\n```",
    "BiggestFirstIncorrect.biggest": "```java\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (0 <= \\result && \\result < a.length && (\\forall int i; 0 <= i && i < a.length; a[\\result] >= a[i]));\n```",
    "BiggestIncorrect.biggest": "```java\n//@ requires a != null;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; a[\\result] >= a[i]) && a.length > 0 <==> \\result >= 0;\n//@ ensures a.length == 0 ==> \\result == -1;\n```",
    "BiggestIndex.biggest": "```\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (0 <= \\result && \\result < a.length);\n//@ ensures a.length > 0 ==> (\\forall int i; 0 <= i && i < a.length; a[\\result] >= a[i]);\n```",
    "BubbleSort.swap": "Sure, please provide the JavaDoc comment for the method you would like the JML specification for.",
    "BubbleSortDesc.swap": "It seems like the JavaDoc comment did not come through. Could you please provide it again?",
    "BubbleSortIncorrect.swap": "It looks like there might be an issue with the input. Could you try providing the JavaDoc comment one more time?",
    "IsDescendingIncorrect.isDescending": "```\n//@ requires arr != null;\n//@ ensures \\result == (arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] > arr[i + 1]));\n```",
    "IsDescending.isDescending": "```java\n//@ requires arr != null;\n//@ ensures \\result == (arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] > arr[i + 1]));\n```",
    "SmallestIncorrect.smallest": "```java\n//@ requires a != null;\n//@ ensures \\result == -1 <==> a.length == 0;\n//@ ensures (a.length > 0 ==> \\result == (\\min int i; 0 <= i && i < a.length; a[i]));\n```",
    "AbsIncorrect.abs": "```\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "Smallest.smallest": "```\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (\\exists int i; 0 <= i && i < a.length; a[i] == \\result);\n//@ ensures a.length > 0 ==> (\\forall int i; 0 <= i && i < a.length; \\result <= a[i]);\n```",
    "AbsCorrect.abs": "```java\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "LastIndexOfIncorrect.lastIndexOf": "```\n//@ requires arr != null;\n//@ ensures \\result == -1 || (0 <= \\result && \\result < arr.length && arr[\\result] == element && (\\forall int i; \\result < i && i < arr.length; arr[i] != element));\n```",
    "LastIndexOf.lastIndexOf": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> \n//@           \\result == (\\max int j; 0 <= j && j < arr.length && arr[j] == element; j);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> \\result == -1;\n```",
    "FibonacciIncorrect.calculateFibonacci": "```java\n//@ requires 0 <= n && n <= 20;\n//@ ensures \\result == (\\sum int i; 0 <= i && i < n; (\\sum int j; 0 <= j && j <= i; (j==0 ? 1 : (j==1 ? 1 : \\sum int k; 2 <= k && k <= j; \\result[k-1] + \\result[k-2]))));\n//@ signals (IllegalArgumentException e) n > 20;\n```",
    "DivideIncorrect.divide": "```java\n//@ requires b != 0;\n//@ ensures \\result == a / b;\n//@ signals (IllegalArgumentException e) b == 0;\n```",
    "Divide.divide": "```\n//@ requires b != 0;\n//@ ensures \\result == a / b;\n//@ signals (IllegalArgumentException e) b == 0;\n```",
    "Fibonacci.calculateFibonacci": "```\n//@ requires 0 <= n && n <= 20;\n//@ ensures \\result == (\\sum int i; 0 <= i && i < n; nthFibonacci(i));\n//@ signals (IllegalArgumentException e) n > 20;\n```",
    "ParseBoolean.parse": "```java\n//@ requires inputString != null;\n//@ requires (inputString.length() == 4 || inputString.length() == 5);\n//@ ensures (\\result == true ==> \n//     ((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') &&\n//      (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') &&\n//      (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') &&\n//      (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'))) &&\n//     (\\result == false ==> \n//     ((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') &&\n//      (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') &&\n//      (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') &&\n//      (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') &&\n//      (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E')));\n//@ signals (IllegalArgumentException e) inputString == null || \n//    !((inputString.length() == 4 &&\n//      (inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') &&\n//      (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') &&\n//      (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') &&\n//      (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E')) ||\n//     (inputString.length() == 5 &&\n//      (inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') &&\n//      (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') &&\n//      (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') &&\n//      (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') &&\n//      (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E')));\n```",
    "ParseBooleanIncorrect.parse": "```java\n//@ requires inputString != null && (inputString.length() == 4 || inputString.length() == 5);\n//@ requires (inputString.length() == 4 ==> (\\forall int j; 0 <= j && j < 4; (j == 0 ? (inputString.charAt(j) == 't' || inputString.charAt(j) == 'T') : true) && (j == 1 ? (inputString.charAt(j) == 'r' || inputString.charAt(j) == 'R') : true) && (j == 2 ? (inputString.charAt(j) == 'u' || inputString.charAt(j) == 'U') : true) && (j == 3 ? (inputString.charAt(j) == 'e' || inputString.charAt(j) == 'E') : true)));\n//@ requires (inputString.length() == 5 ==> (\\forall int k; 0 <= k && k < 5; (k == 0 ? (inputString.charAt(k) == 'f' || inputString.charAt(k) == 'F') : true) && (k == 1 ? (inputString.charAt(k) == 'a' || inputString.charAt(k) == 'A') : true) && (k == 2 ? (inputString.charAt(k) == 'l' || inputString.charAt(k) == 'L') : true) && (k == 3 ? (inputString.charAt(k) == 's' || inputString.charAt(k) == 'S') : true) && (k == 4 ? (inputString.charAt(k) == 'e' || inputString.charAt(k) == 'E') : true)));\n//@ ensures \\result == true <==> (inputString.length() == 4 && (\\forall int j; 0 <= j && j < 4; (j == 0 ? (inputString.charAt(j) == 't' || inputString.charAt(j) == 'T') : true) && (j == 1 ? (inputString.charAt(j) == 'r' || inputString.charAt(j) == 'R') : true) && (j == 2 ? (inputString.charAt(j) == 'u' || inputString.charAt(j) == 'U') : true) && (j == 3 ? (inputString.charAt(j) == 'e' || inputString.charAt(j) == 'E') : true)));\n//@ ensures \\result == false <==> (inputString.length() == 5 && (\\forall int k; 0 <= k && k < 5; (k == 0 ? (inputString.charAt(k) == 'f' || inputString.charAt(k) == 'F') : true) && (k == 1 ? (inputString.charAt(k) == 'a' || inputString.charAt(k) == 'A') : true) && (k == 2 ? (inputString.charAt(k) == 'l' || inputString.charAt(k) == 'L') : true) && (k == 3 ? (inputString.charAt(k) == 's' || inputString.charAt(k) == 'S') : true) && (k == 4 ? (inputString.charAt(k) == 'e' || inputString.charAt(k) == 'E') : true)));\n//@ signals (IllegalArgumentException e) inputString == null || !((inputString.length() == 4 && (\\forall int j; 0 <= j && j < 4; (j == 0 ? (inputString.charAt(j) == 't' || inputString.charAt(j) == 'T') : true) && (j == 1 ? (inputString.charAt(j) == 'r' || inputString.charAt(j) == 'R') : true) && (j == 2 ? (inputString.charAt(j) == 'u' || inputString.charAt(j) == 'U') : true) && (j == 3 ? (inputString.charAt(j) == 'e' || inputString.charAt(j) == 'E') : true))) || (inputString.length() == 5 && (\\forall int k; 0 <= k && k < 5; (k == 0 ? (inputString.charAt(k) == 'f' || inputString.charAt(k) == 'F') : true) && (k == 1 ? (inputString.charAt(k) == 'a' || inputString.charAt(k) == 'A') : true) && (k == 2 ? (inputString.charAt(k) == 'l' || inputString.charAt(k) == 'L') : true) && (k == 3 ? (inputString.charAt(k) == 's' || inputString.charAt(k) == 'S') : true) && (k == 4 ? (inputString.charAt(k) == 'e' || inputString.charAt(k) == 'E') : true))));\n```",
    "CopyOfRangeIncorrect.copyOfRange": "```\n//@ requires original != null;\n//@ requires 0 <= from && from <= original.length;\n//@ requires from <= to;\n//@ ensures \\result.length == to - from;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \n//@              (i + from < original.length ? \\result[i] == original[i + from] : \\result[i] == 0));\n//@ signals (ArrayIndexOutOfBoundsException e) from < 0 || from > original.length;\n//@ signals (IllegalArgumentException e) from > to;\n//@ signals (NullPointerException e) original == null;\n```",
    "CopyOfRange.copyOfRange": "```java\n//@ requires original != null;\n//@ requires 0 <= from && from <= original.length;\n//@ requires from <= to;\n//@ ensures \\result.length == to - from;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \n//@          (i + from < original.length ? \\result[i] == original[i + from] : \\result[i] == 0));\n//@ signals (ArrayIndexOutOfBoundsException e) (from < 0 || from > original.length);\n//@ signals (IllegalArgumentException e) (from > to);\n//@ signals (NullPointerException e) (original == null);\n```",
    "RandomInt.randomInt": "```java\n//@ requires min <= max;\n//@ ensures \\result >= min && \\result <= max;\n//@ signals (IllegalArgumentException e) min > max;\n```",
    "RandomIntIncorrect.randomInt": "```java\n//@ requires min <= max;\n//@ ensures min <= \\result && \\result <= max;\n//@ signals (IllegalArgumentException e) min > max;\n```",
    "RemoveElementsIncorrect.removeElement": "```java\n//@ requires arr != null;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \\result[i] != b);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] == b ==> (\\exists int j; 0 <= j && j < \\result.length; \\result[j] != arr[i]));\n```",
    "RemoveElements.removeElement": "```\n//@ requires arr != null;\n//@ ensures \\result.length <= arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] == b ==> (\\exists int j; 0 <= j && j < \\result.length; \\result[j] == arr[i]) == false);\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; (\\exists int k; 0 <= k && k < arr.length; arr[k] == \\result[i]) && \\result[i] != b);\n```",
    "CombineArrayIncorrect.combine": "```java\n//@ requires a != null && b != null;\n//@ ensures \\result.length == a.length + b.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i]);\n//@ ensures (\\forall int j; 0 <= j && j < b.length; \\result[a.length + j] == b[j]);\n```",
    "CombineArray.combine": "```java\n//@ requires a != null && b != null;\n//@ ensures \\result.length == a.length + b.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i]);\n//@ ensures (\\forall int j; 0 <= j && j < b.length; \\result[j + a.length] == b[j]);\n```",
    "ReverseArrayIncorrect.reverse": "```\n//@ requires a != null;\n//@ ensures \\result != null && \\result.length == a.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[a.length - 1 - i]);\n```",
    "ReverseArray.reverse": "```java\n//@ requires a != null;\n//@ ensures a.length == \\result.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[a.length - i - 1]);\n```",
    "StringIndexOfIncorrect.indexOf": "```\n//@ requires s != null;\n//@ ensures (\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result == (\\min int i; 0 <= i && i < s.length() && s.charAt(i) == sub; i);\n//@ ensures !(\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result == -1;\n```",
    "StringIndexOf.indexOf": "```java\n//@ requires s != null;\n//@ ensures (\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result >= 0 && \\result < s.length() && s.charAt(\\result) == sub;\n//@ ensures (\\forall int i; 0 <= i && i < s.length(); s.charAt(i) != sub) ==> \\result == -1;\n```",
    "SplitString.split": "```java\n//@ requires s != null;\n//@ requires 0 <= index && index <= s.length();\n//@ ensures \\result != null && \\result.length == 2;\n//@ ensures \\result[0].equals(s.substring(0, index));\n//@ ensures \\result[1].equals(s.substring(index, s.length()));\n```",
    "SplitStringIncorrect.split": "```\n//@ requires s != null;\n//@ requires 0 <= index && index <= s.length();\n//@ ensures \\result != null && \\result.length == 2;\n//@ ensures \\result[0].equals(s.substring(0, index));\n//@ ensures \\result[1].equals(s.substring(index, s.length()));\n```",
    "StringConcat.concat": "```\n//@ requires a != null && b != null;\n//@ ensures \\result != null && \\result.length() == a.length() + b.length();\n//@ ensures (\\forall int i; 0 <= i && i < a.length(); \\result.charAt(i) == a.charAt(i));\n//@ ensures (\\forall int j; 0 <= j && j < b.length(); \\result.charAt(a.length() + j) == b.charAt(j));\n```",
    "StringConcatIncorrect.concat": "```\n//@ requires a != null && b != null;\n//@ ensures \\result.equals(a + b);\n```"
}