{
    "Abs.abs": "```\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "AbsMinus.abs": "```\n//@requires true;\n//@ensures \\result == (a >= 0 ? a : -a);\n```",
    "AbsSameValue.abs": "```java\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "AddCorrect.add": "```java\n//@ requires true;\n//@ ensures \\result == a + b;\n```",
    "AddIncorrect.add": "```java\n//@ requires true;\n//@ ensures \\result == a + b;\n```",
    "IntSquare.squareOf": "```\n//@ requires true;\n//@ ensures \\result == x * x;\n```",
    "IntSquareIncorrect.squareOf": "```\n//@ requires true;\n//@ ensures \\result == x * x;\n```",
    "MultiplyCorrect.multiply": "```java\n//@ requires true;\n//@ ensures \\result == a * b;\n```",
    "MultiplyInCorrect.multiply": "```java\n//@requires true;\n//@ensures \\result == a * b;\n```",
    "SubtractCorrect.subtract": "```java\n//@ requires true;\n//@ ensures \\result == a - b;\n```",
    "SubtractInvalidOrder.subtract": "```\n//@ requires true;\n//@ ensures \\result == a - b;\n```",
    "CompareArray.compare": "```java\n//@ requires a != null && b != null;\n//@ ensures \\result == (a.length == b.length && (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]));\n```",
    "CompareArrayIncorrect.compare": "```java\n//@ requires a != null && b != null;\n//@ ensures \\result <==> (a.length == b.length) && \n//@          (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]);\n```",
    "Conjunction.conjunctOf": "```\n//@requires true;\n//@ensures \\result == (b1 && b2);\n```",
    "ConjunctionIncorrect.conjunctOf": "```\n//@requires true\n//@ensures \\result == (b1 && b2)\n```",
    "Disjunction.disjunctOf": "```\n//@ requires true;\n//@ ensures \\result == (b1 || b2);\n```",
    "DisjunctionIncorrect.disjunctOf": "```java\n//@ requires true;\n//@ ensures \\result == (b1 || b2);\n```",
    "DistinctArray.isDistinct": "```\n//@ requires arr != null;\n//@ ensures \\result == (\\forall int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length; i == j || arr[i] != arr[j]);\n```",
    "DistinctArrayIncorrect.isDistinct": "```\n//@ requires arr != null;\n//@ ensures \\result <==> (\\forall int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length; i == j || arr[i] != arr[j]);\n```",
    "IsAscending.isAscending": "```jml\n//@ requires arr != null;\n//@ ensures \\result == (arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i + 1]));\n```",
    "IsAscendingIncorrect.isAscending": "```\n//@ requires arr != null;\n//@ ensures \\result == (arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i + 1]));\n```",
    "IsCommonFactor.isCommonFactor": "```java\n//@ requires factor >= 1;\n//@ ensures \\result <==> (a % factor == 0 && b % factor == 0);\n//@ signals (IllegalArgumentException e) factor < 1;\n```",
    "IsCommonFactorIncorrect.isCommonFactor": "```java\n//@ requires factor >= 1;\n//@ ensures \\result <==> (a % factor == 0) && (b % factor == 0);\n//@ signals (IllegalArgumentException e) factor < 1;\n```",
    "XOR.xor": "```java\n//@ requires true;\n//@ ensures \\result == (b1 && !b2) || (!b1 && b2);\n```",
    "XORIncorrect.xor": "```\n//@ requires true;\n//@ ensures \\result == (b1 != b2);\n```",
    "ComputeArea.computeArea": "```java\n//@ requires ax1 <= ax2 && ay1 <= ay2;\n//@ ensures \\result == (ax2 - ax1) * (ay2 - ay1);\n```",
    "ComputeAreaIncorrect.computeArea": "```java\n//@ requires ax1 <= ax2 && ay1 <= ay2;\n//@ ensures \\result == (ax2 - ax1) * (ay2 - ay1);\n```",
    "CreditCard.charge": "```\n//@ requires amount >= 0;\n//@ ensures balance == \\old(balance) + amount;\n```",
    "CreditCardIncorrect.charge": "```\n//@ requires amount >= 0;\n//@ ensures balance == \\old(balance) + amount;\n```",
    "DigitRoot.digitRoot": "```\n//@ requires number >= 0;\n//@ ensures 0 <= \\result && \\result <= 9;\n//@ ensures number == 0 ==> \\result == 0;\n//@ ensures number > 0 ==> \\result == 1 + ((number - 1) % 9);\n```",
    "GenerateString.generateString": "```\n//@ requires length >= 0;\n//@ ensures \\result.length() == length;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length(); 'a' <= \\result.charAt(i) && \\result.charAt(i) <= 'z');\n```",
    "GenerateStringIncorrectLength.generateString": "```java\n//@ requires length >= 0;\n//@ ensures \\result.length() == length;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length(); 'a' <= \\result.charAt(i) && \\result.charAt(i) <= 'z');\n```",
    "SetZero.setZero": "```java\n//@ requires a != null;\n//@ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n//@ ensures \\result.length == a.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; (i < iBegin || i > iEnd) ==> \\result[i] == a[i]);\n//@ ensures (\\forall int i; iBegin <= i && i <= iEnd; \\result[i] == 0);\n```",
    "SetZeroIncorrectLength.setZero": "```java\n//@ requires a != null;\n//@ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n//@ ensures (\\forall int i; 0 <= i && i < iBegin; \\result[i] == a[i]);\n//@ ensures (\\forall int i; iBegin <= i && i <= iEnd; \\result[i] == 0);\n//@ ensures (\\forall int i; iEnd < i && i < a.length; \\result[i] == a[i]);\n```",
    "StringLength.length": "```java\n//@ requires s != null;\n//@ ensures \\result == s.length();\n```",
    "StringLengthIncorrect.length": "```java\n//@ requires s != null;\n//@ ensures \\result == s.length();\n```",
    "Temperatures.convertTemperature": "```\n//@ requires celsius >= -27315 / 100;\n//@ ensures \\result.length == 3;\n//@ ensures \\result[0] == celsius;\n//@ ensures \\result[1] == celsius + 27315 / 100;\n//@ ensures \\result[2] == celsius * 9 / 5 + 32;\n//@ signals (IllegalArgumentException e) celsius < -27315 / 100;\n```",
    "TemperaturesIncorrect.convertTemperature": "```java\n//@ requires true;\n//@ ensures \\result.length == 3;\n//@ ensures \\result[0] == celsius;\n//@ ensures \\result[1] == celsius + 273.15;\n//@ ensures \\result[2] == (celsius * 9 / 5) + 32;\n```",
    "ExceptionTest.test": "```java\n//@ requires true;\n//@ ensures \\result == a;\n//@ signals (IllegalArgumentException) a > 10;\n```",
    "ExceptionTestIncorrect.test": "```java\n//@ requires true;\n//@ ensures \\result == a;\n//@ signals (IllegalArgumentException) a > 10;\n```",
    "BubbleSort.bubbleSort": "```java\n//@ requires arr != null;\n//@ ensures \\result != null && \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] <= \\result[i + 1]);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; \n//@             (\\exists int j; 0 <= j && j < \\result.length; \\result[j] == arr[i]));\n```",
    "BubbleSortDesc.bubbleSort": "```java\n//@ requires arr != null;\n//@ ensures \\result != arr;\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] >= \\result[i + 1]);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < \\result.length; arr[i] == \\result[j]));\n```",
    "BubbleSortIncorrect.bubbleSort": "```java\n//@ requires arr != null;\n//@ ensures \\result != arr;\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < arr.length;\n//@    (\\exists int j; 0 <= j && j < arr.length; \\result[j] == arr[i]));\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] <= \\result[i + 1]);\n```",
    "ContainsDuplicate.containsDuplicate": "```java\n//@ requires nums != null;\n//@ ensures \\result <==> (\\exists int i, j; 0 <= i && i < nums.length && 0 <= j && j < nums.length && i != j; nums[i] == nums[j]);\n```",
    "ContainsDuplicateIncorrect.containsDuplicate": "```java\n//@ requires nums != null;\n//@ ensures \\result == (\\exists int i, j; 0 <= i && i < nums.length && 0 <= j && j < nums.length && i != j; nums[i] == nums[j]);\n```",
    "FindFirstZero.findFirstZero": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == (\\min int i; 0 <= i && i < arr.length && arr[i] == 0; i);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == -1;\n```",
    "FindFirstZeroIncorrect.findFirstZero": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> (\\result >= 0 && arr[\\result] == 0);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] != 0) ==> (\\result == -1);\n```",
    "IndexOf.find": "```\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result >= 0 && arr[\\result] == target;\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] != target) ==> \\result == -1;\n//@ ensures \\result == -1 || (0 <= \\result && \\result < arr.length);\n```",
    "IndexOfIncorrect.find": "```\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == (\\min int i; 0 <= i && i < arr.length && arr[i] == target; i);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == -1;\n```",
    "Biggest.biggest": "```\n//@ requires a != null;\n//@ ensures (a.length == 0) ==> (\\result == -1);\n//@ ensures a.length > 0 ==> (\\exists int i; 0 <= i && i < a.length; (\\result == a[i] && (\\forall int j; 0 <= j && j < a.length; a[j] <= a[i])));\n```",
    "BiggestFirstIncorrect.biggest": "```java\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (0 <= \\result && \\result < a.length && (\\forall int i; 0 <= i && i < a.length; a[\\result] >= a[i]));\n```",
    "BiggestIncorrect.biggest": "```\n//@ requires a != null;\n//@ ensures (\\result == -1 && a.length == 0) || \n//@         (0 <= \\result && \\result < a.length && \n//@         (\\forall int i; 0 <= i && i < a.length; a[\\result] >= a[i]));\n```",
    "BiggestIndex.biggest": "```\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (0 <= \\result && \\result < a.length);\n//@ ensures a.length > 0 ==> (\\forall int i; 0 <= i && i < a.length; a[\\result] >= a[i]);\n```",
    "BubbleSort.swap": "Sure, please provide the JavaDoc comment for the method you would like the JML specification for.",
    "BubbleSortDesc.swap": "It seems like the JavaDoc comment did not come through. Could you please provide it again?",
    "BubbleSortIncorrect.swap": "It looks like there might be an issue with the input. Could you try providing the JavaDoc comment one more time?",
    "IsDescendingIncorrect.isDescending": "```\n//@ requires arr != null;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] > arr[i + 1]);\n```",
    "IsDescending.isDescending": "```java\n//@ requires arr != null;\n//@ ensures \\result <==> (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] > arr[i + 1]);\n```",
    "SmallestIncorrect.smallest": "```java\n//@ requires a != null;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; a[i] >= \\result) && (\\exists int i; 0 <= i && i < a.length; a[i] == \\result) || a.length == 0 && \\result == -1;\n```",
    "AbsIncorrect.abs": "```java\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "Smallest.smallest": "```java\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (\\exists int i; 0 <= i && i < a.length; \\result == a[i]) && (\\forall int j; 0 <= j && j < a.length; a[j] >= \\result);\n```",
    "AbsCorrect.abs": "```java\n//@ requires true;\n//@ ensures \\result == (a < 0 ? -a : a);\n```",
    "LastIndexOfIncorrect.lastIndexOf": "```\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> \\result == (\\max int j; 0 <= j && j < arr.length && arr[j] == element; j);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] != element) ==> \\result == -1;\n```",
    "LastIndexOf.lastIndexOf": "```\n//@ requires arr != null;\n//@ ensures \\result == -1 <==> (\\forall int i; 0 <= i && i < arr.length; arr[i] != element);\n//@ ensures \\result != -1 ==> (0 <= \\result && \\result < arr.length && arr[\\result] == element && (\\forall int i; \\result < i && i < arr.length; arr[i] != element));\n```",
    "FibonacciIncorrect.calculateFibonacci": "```java\n//@ requires 0 <= n && n <= 20;\n//@ ensures \\result == (\\sum int i; 0 <= i && i < n; (\\sum int j; 0 <= j && j <= i; (j==0 ? 1 : (j==1 ? 1 : \\sum int k; 2 <= k && k <= j; \\result[k-1] + \\result[k-2]))));\n//@ signals (IllegalArgumentException e) n > 20;\n```",
    "DivideIncorrect.divide": "```\n//@ requires b != 0;\n//@ ensures \\result == a / b;\n//@ signals (IllegalArgumentException e) b == 0;\n```",
    "Divide.divide": "```\n//@ requires b != 0;\n//@ ensures \\result == a / b;\n```",
    "Fibonacci.calculateFibonacci": "```\n//@ requires 0 <= n && n <= 20;\n//@ ensures \\result == (\\sum int i; 0 <= i && i < n; nthFibonacci(i));\n//@ signals (IllegalArgumentException e) n > 20;\n```",
    "ParseBoolean.parse": "```java\n//@ requires inputString != null;\n//@ requires inputString.length() == 4 || inputString.length() == 5;\n//@ requires (inputString.length() == 4 ==> ((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') &&\n//@                                          (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') &&\n//@                                          (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') &&\n//@                                          (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'))) ||\n//@           (inputString.length() == 5 ==> ((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') &&\n//@                                          (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') &&\n//@                                          (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') &&\n//@                                          (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') &&\n//@                                          (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E')));\n//@ ensures (\\result.booleanValue() == true) == (inputString.length() == 4 &&\n//@                                             (inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') &&\n//@                                             (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') &&\n//@                                             (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') &&\n//@                                             (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'));\n//@ ensures (\\result.booleanValue() == false) == (inputString.length() == 5 &&\n//@                                               (inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') &&\n//@                                               (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') &&\n//@                                               (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') &&\n//@                                               (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') &&\n//@                                               (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E'));\n//@ signals (IllegalArgumentException e) inputString == null ||\n//@          (inputString.length() != 4 && inputString.length() != 5) ||\n//@          ((inputString.length() == 4 && !((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') &&\n//@                                           (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') &&\n//@                                           (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') &&\n//@                                           (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'))) &&\n//@           (inputString.length() == 5 && !((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') &&\n//@                                           (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') &&\n//@                                           (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') &&\n//@                                           (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') &&\n//@                                           (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E'))));\n```",
    "ParseBooleanIncorrect.parse": "```\n//@ requires inputString != null && (inputString.length() == 4 || inputString.length() == 5);\n//@ requires (inputString.length() == 4 ==> (inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') &&\n//@                                 (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') &&\n//@                                 (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') &&\n//@                                 (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'));\n//@ requires (inputString.length() == 5 ==> (inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') &&\n//@                                 (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') &&\n//@                                 (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') &&\n//@                                 (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') &&\n//@                                 (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E'));\n//@ ensures (inputString.length() == 4) ==> \\result == true;\n//@ ensures (inputString.length() == 5) ==> \\result == false;\n//@ signals (IllegalArgumentException e) inputString == null || \n//@                                     !( (inputString.length() == 4 && \n//@                                        ((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') &&\n//@                                         (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') &&\n//@                                         (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') &&\n//@                                         (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'))) ||\n//@                                        (inputString.length() == 5 && \n//@                                        ((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') &&\n//@                                         (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') &&\n//@                                         (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') &&\n//@                                         (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') &&\n//@                                         (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E'))));\n```",
    "CopyOfRangeIncorrect.copyOfRange": "```\n//@ requires original != null;\n//@ requires from >= 0 && from <= original.length;\n//@ requires from <= to;\n//@ ensures \\result.length == to - from;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \n//@          (i < original.length - from ==> \\result[i] == original[i + from]) \n//@          && (i >= original.length - from ==> \\result[i] == 0));\n//@ signals (ArrayIndexOutOfBoundsException e) from < 0 || from > original.length;\n//@ signals (IllegalArgumentException e) from > to;\n```",
    "CopyOfRange.copyOfRange": "```java\n//@ requires original != null;\n//@ requires 0 <= from && from <= original.length;\n//@ requires from <= to;\n//@ ensures \\result != null;\n//@ ensures \\result.length == to - from;\n//@ ensures (\\forall int i; 0 <= i && from + i < original.length && i < \\result.length; \\result[i] == original[from + i]);\n//@ ensures (\\forall int i; original.length <= from + i && i < \\result.length; \\result[i] == 0);\n//@ signals (ArrayIndexOutOfBoundsException e) from < 0 || from > original.length;\n//@ signals (IllegalArgumentException e) from > to;\n```",
    "RandomInt.randomInt": "```java\n//@ requires min <= max;\n//@ ensures \\result >= min && \\result <= max;\n//@ signals (IllegalArgumentException e) min > max;\n```",
    "RandomIntIncorrect.randomInt": "```java\n//@ requires min <= max;\n//@ ensures \\result >= min && \\result <= max;\n//@ signals (IllegalArgumentException e) min > max;\n```",
    "RemoveElementsIncorrect.removeElement": "```java\n//@ requires arr != null;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \\result[i] != b);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; !(arr[i] == b) ==> (\\exists int j; 0 <= j && j < \\result.length; \\result[j] == arr[i]));\n//@ ensures \\result.length <= arr.length;\n```",
    "RemoveElements.removeElement": "```java\n//@ requires arr != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length <= arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; (\\forall int j; 0 <= j && j < arr.length; \\result[i] == arr[j] && arr[j] != b));\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \\exists int j; 0 <= j && j < arr.length; \\result[i] == arr[j]);\n//@ ensures (\\forall int j; 0 <= j && j < arr.length; arr[j] != b ==> (\\exists int i; 0 <= i && i < \\result.length; \\result[i] == arr[j]));\n```",
    "CombineArrayIncorrect.combine": "```java\n//@ requires a != null && b != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length == a.length + b.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i]);\n//@ ensures (\\forall int i; 0 <= i && i < b.length; \\result[a.length + i] == b[i]);\n```",
    "CombineArray.combine": "```java\n//@ requires a != null && b != null;\n//@ ensures \\result.length == a.length + b.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i]);\n//@ ensures (\\forall int i; 0 <= i && i < b.length; \\result[a.length + i] == b[i]);\n```",
    "ReverseArrayIncorrect.reverse": "```\n//@ requires a != null;\n//@ ensures \\result != null && \\result.length == a.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[a.length - 1 - i]);\n```",
    "ReverseArray.reverse": "```\n//@ requires a != null;\n//@ ensures a.length == \\result.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[a.length - 1 - i]);\n```",
    "StringIndexOfIncorrect.indexOf": "```java\n//@ requires s != null;\n//@ ensures (\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result == (\\min int j; 0 <= j && j < s.length() && s.charAt(j) == sub; j);\n//@ ensures !(\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result == -1;\n```",
    "StringIndexOf.indexOf": "```java\n//@ requires s != null;\n//@ ensures (\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result == (\\min int i; 0 <= i && i < s.length() && s.charAt(i) == sub; i);\n//@ ensures !(\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result == -1;\n```",
    "SplitString.split": "```java\n//@ requires s != null;\n//@ requires 0 <= index && index <= s.length();\n//@ ensures \\result.length == 2;\n//@ ensures \\result[0].equals(s.substring(0, index));\n//@ ensures \\result[1].equals(s.substring(index, s.length()));\n```",
    "SplitStringIncorrect.split": "```java\n//@ requires s != null;\n//@ requires 0 <= index && index <= s.length();\n//@ ensures \\result != null && \\result.length == 2;\n//@ ensures \\result[0].equals(s.substring(0, index));\n//@ ensures \\result[1].equals(s.substring(index, s.length()));\n```",
    "StringConcat.concat": "```java\n//@ requires a != null && b != null;\n//@ ensures \\result != null && \\result.length() == a.length() + b.length();\n```",
    "StringConcatIncorrect.concat": "```java\n//@ requires a != null && b != null;\n//@ ensures \\result.equals(a + b);\n```",
    "PrimeCheck.isPrime": "```java\n//@ requires n > 1;\n//@ ensures \\result == (\\forall int i; 2 <= i && i <= n / 2; n % i != 0);\n```",
    "PrimeCheckIncorrect.isPrime": "```java\n//@ requires n > 1;\n//@ ensures \\result <==> (\\forall int i; 2 <= i && i <= n / 2; n % i != 0);\n```",
    "PrimeNumberGenerator.generatePrimes": "```\n//@ requires 0 <= n && n <= 20;\n//@ ensures \\result.length >= 0;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \n//@   (\\forall int j; 2 <= j && j < \\result[i]; \\result[i] % j != 0) \n//@   && \\result[i] >= 2 && \\result[i] <= n);\n//@ ensures (\\forall int k; 2 <= k && k <= n;\n//@   (\\forall int l; 0 <= l && l < \\result.length; \\result[l] == k || \n//@   (\\exists int d; 2 <= d && d < k; k % d == 0)));\n//@ signals (IllegalArgumentException) n < 0 || n > 20;\n```",
    "PrimeNumberGeneratorIncorrect.generatePrimes": "```java\n//@ requires 0 <= n && n <= 20;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \n//@             \\forall int j; 2 <= j && j < \\result[i]; \\result[i] % j != 0);\n//@ signals (IllegalArgumentException e) n > 20 || n < 0;\n```",
    "LeapYear.isLeapYear": "```\n//@ requires true;\n//@ ensures \\result == ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0);\n```",
    "LeapYearIncorrect.isLeapYear": "```\n//@ requires true;\n//@ ensures \\result == ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0);\n```",
    "Withdraw.withdraw": "```java\n//@ requires amount >= 0;\n//@ requires balance >= 0;\n//@ requires amount <= balance;\n//@ ensures \\result == balance - amount;\n//@ signals_only Exception;\n//@ signals (Exception e) amount < 0 || balance < 0 || amount > balance;\n```",
    "WithdrawIncorrect.withdraw": "```\n//@ requires balance >= 0;\n//@ requires amount >= 0;\n//@ requires amount <= balance;\n//@ ensures \\result == balance - amount;\n//@ signals (IllegalArgumentException e) (amount < 0 || amount > balance || balance < 0 || balance - amount < 0);\n```",
    "Dart.calculateScore": "```\n//@ requires 1 <= number && number <= 20;\n//@ requires 1 <= region && region <= 3;\n//@ requires currentScore >= 0;\n//@ ensures \\result == (currentScore - (number * region)) ? (currentScore - (number * region) >= 0) : currentScore;\n//@ signals (IllegalArgumentException e) false;\n```",
    "DartIncorrect.calculateScore": "```\n//@ requires 1 <= number && number <= 20;\n//@ requires 1 <= region && region <= 3;\n//@ requires currentScore >= 0;\n//@ ensures \\result == (currentScore - (number * region)) && \\result >= 0 || \\result == currentScore;\n//@ signals (IllegalArgumentException) 1 > number || number > 20 || 1 > region || region > 3;\n```",
    "AddWithMax.addWithMax": "```java\n//@ requires true;\n//@ ensures \\result == a + b;\n//@ signals (IllegalArgumentException e) a + b > 2000;\n```",
    "PowIncorrect.pow": "```java\n//@ requires a >= 0 && b >= 0;\n//@ requires a <= 10 && b <= 10;\n//@ ensures (b == 0) ==> (\\result == 1);\n//@ ensures (b != 0) ==> (\\result == (\\product int i; 0 <= i && i < b; a));\n//@ signals (IllegalArgumentException e) (a < 0 || b < 0 || a > 10 || b > 10);\n```",
    "AddWithMaxIncorrect.addWithMax": "```java\n//@ requires true;\n//@ ensures \\result == a + b;\n//@ signals (IllegalArgumentException e) a + b > 2000;\n```",
    "Pow.pow": "```\n//@ requires 0 <= a && a <= 10;\n//@ requires 0 <= b && b <= 10;\n//@ ensures \\result == (b == 0 ? 1 : (\\product int i; 0 <= i && i < b; a));\n//@ signals_only IllegalArgumentException;\n//@ signals (IllegalArgumentException e) a < 0 || b < 0 || a > 10 || b > 10;\n```"
}