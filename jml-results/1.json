{
    "DistinctArrayIncorrect.isDistinct": "//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures \\result == (\\forall int i,j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j; arr[i] != arr[j]);",
    "LastIndexOfIncorrect.lastIndexOf": "//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures \\result >= 0 ==> (0 <= \\result && \\result < arr.length && arr[\\result] == element && (\\forall int j; \\result < j && j < arr.length; arr[j] != element));\n//@ ensures \\result == -1 <==> (\\forall int i; 0 <= i && i < arr.length; arr[i] != element);",
    "SetZero.setZero": "//@ public normal_behavior\n//@ requires a != null;\n//@ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n//@ ensures \\result != a;\n//@ ensures \\result.length == a.length;\n//@ ensures (\\forall int i; 0 <= i && i < iBegin; \\result[i] == a[i]);\n//@ ensures (\\forall int i; iBegin <= i && i <= iEnd; \\result[i] == 0);\n//@ ensures (\\forall int i; iEnd < i && i < a.length; \\result[i] == a[i]);\n//@ also public exceptional_behavior\n//@ requires a == null;\n//@ signals (NullPointerException e) a == null\n//@ also public exceptional_behavior\n//@ requires a != null && (iBegin < 0 || iEnd < iBegin || iEnd >= a.length);\n//@ signals (ArrayIndexOutOfBoundsException e) a != null && (iBegin < 0 || iEnd < iBegin || iEnd >= a.length)",
    "IsAscending.isAscending": "//@ public normal_behavior\n//@ requires arr != null;\n//@ requires arr.length < 2;\n//@ ensures \\result == true;\n//@ also\n//@ public normal_behavior\n//@ requires arr != null;\n//@ requires arr.length >= 2;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i+1]);",
    "IndexOfIncorrect.find": "// @public normal_behavior\n// @requires arr != null;\n// @ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> (\\result == \\min int i; 0 <= i && i < arr.length && arr[i] == target; i);\n// @ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] != target) ==> \\result == -1;",
    "IsAscendingIncorrect.isAscending": "// public normal_behavior\n// requires arr != null;\n// ensures \\result <==> (\\forall int i; 0 <= i && i + 1 < arr.length; arr[i + 1] > arr[i]);",
    "IsDescending.isDescending": "// @ public normal_behavior\n// @ requires arr != null;\n// @ ensures \\result == (arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i+1] < arr[i]));",
    "IsDescendingIncorrect.isDescending": "//@ requires arr != null;\n//@ ensures \\result <==> (arr.length < 2 || (\\forall int i; 0 <= i && i+1 < arr.length; arr[i+1] < arr[i]));",
    "ReverseArrayIncorrect.reverse": "//@ requires a != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length == a.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == \\old(a[a.length - 1 - i]));",
    "RemoveElementsIncorrect.removeElement": "// @requires arr != null;\n// @ensures \\result != null;\n// @ensures \\result.length == (\\sum int i; 0 <= i && i < arr.length && arr[i] != b; 1);\n// @ensures (\\forall int i; 0 <= i && i < \\result.length; \\result[i] != b);\n// @ensures (\\forall int i; 0 <= i && i < \\result.length; (\\exists int j; 0 <= j && j < arr.length; \\result[i] == arr[j]));\n// @ensures (\\forall int j; 0 <= j && j < arr.length; arr[j] != b ==> (\\exists int i; 0 <= i && i < \\result.length; \\result[i] == arr[j]));",
    "ReverseArray.reverse": "// @ public normal_behavior\n// @ requires a != null;\n// @ ensures \\result != null;\n// @ ensures \\result.length == a.length;\n// @ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == \\old(a[a.length - 1 - i]));\n// @ also public exceptional_behavior\n// @ requires a == null;\n// @ signals (NullPointerException e) a == null;",
    "RemoveElements.removeElement": "//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length == arr.length - (\\sum int i; 0 <= i && i < arr.length; arr[i] == b ? 1 : 0);\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \\result[i] != b);\n//@ ensures (\\forall int j; 0 <= j && j < arr.length; arr[j] != b ==> (\\exists int k; 0 <= k && k < \\result.length; \\result[k] == arr[j]));\n//@ also public exceptional_behavior\n//@ requires arr == null;\n//@ signals (NullPointerException e) arr == null;",
    "SetZeroIncorrectLength.setZero": "//@ public normal_behavior\n//@ requires a != null\n//@ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length\n//@ ensures \\result != null\n//@ ensures \\result.length == a.length\n//@ ensures (\\forall int j; 0 <= j && j < iBegin; \\result[j] == a[j])\n//@ ensures (\\forall int j; iBegin <= j && j <= iEnd; \\result[j] == 0)\n//@ ensures (\\forall int j; iEnd < j && j < a.length; \\result[j] == a[j])\n//@ also public exceptional_behavior\n//@ requires a == null\n//@ signals (NullPointerException e) a == null\n//@ also public exceptional_behavior\n//@ requires a != null\n//@ requires iBegin < 0 || iBegin > iEnd || iEnd >= a.length\n//@ signals (IndexOutOfBoundsException e) iBegin < 0 || iBegin > iEnd || iEnd >= a.length",
    "ContainsDuplicateIncorrect.containsDuplicate": "// @requires nums != null\n// @ensures \\result == (\\exists int i; 0 <= i && i < nums.length; \\exists int j; i + 1 <= j && j < nums.length; nums[i] == nums[j])",
    "ContainsDuplicate.containsDuplicate": "//@ public normal_behavior\n//@ requires nums != null;\n//@ ensures \\result == (\\exists int i; 0 <= i && i < nums.length; \\exists int j; 0 <= j && j < nums.length; i != j && nums[i] == nums[j]);",
    "LastIndexOf.lastIndexOf": "//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] != element) ==> \\result == -1;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> \\result == (\\max int i; 0 <= i && i < arr.length && arr[i] == element; i);",
    "CompareArrayIncorrect.compare": "//@ requires a != null;\n//@ requires b != null;\n//@ ensures \\result == (a.length == b.length && (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]));",
    "DistinctArray.isDistinct": "//@ requires arr != null;\n//@ ensures \\result == (\\forall int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j; arr[i] != arr[j]);",
    "FindFirstZeroIncorrect.findFirstZero": "//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==>\n           (0 <= \\result && \\result < arr.length && arr[\\result] == 0 &&\n            (\\forall int j; 0 <= j && j < \\result; arr[j] != 0));\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] != 0) ==> \\result == -1;",
    "FindFirstZero.findFirstZero": "// @ public normal_behavior\n// @ requires arr != null;\n// @ ensures (\\result >= 0 && \\result < arr.length) ==> arr[\\result] == 0;\n// @ ensures (\\result >= 0 && \\result < arr.length) ==> (\\forall int i; 0 <= i && i < \\result; arr[i] != 0);\n// @ ensures \\result == -1 ==> (\\forall int i; 0 <= i && i < arr.length; arr[i] != 0);",
    "Smallest.smallest": "//@ public normal_behavior\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (\\forall int i; 0 <= i && i < a.length; \\result <= a[i]);\n//@ ensures a.length > 0 ==> (\\exists int i; 0 <= i && i < a.length; a[i] == \\result);",
    "BubbleSort.bubbleSort": "// @ public normal_behavior\n// @ requires arr != null;\n// @ ensures \\result != arr;\n// @ ensures \\result.length == arr.length;\n// @ ensures (\\forall int i; 0 <= i && i + 1 < \\result.length; \\result[i] <= \\result[i+1]);\n// @ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] == \\old(arr[i]));\n// @ ensures (\\forall int k; 0 <= k && k < arr.length; (\\sum int i; 0 <= i && i < arr.length; arr[i] == arr[k] ? 1 : 0) == (\\sum int i; 0 <= i && i < \\result.length; \\result[i] == arr[k] ? 1 : 0));",
    "BiggestIncorrect.biggest": "// public normal_behavior\n// @requires a != null;\n// @ensures a.length == 0 ==> \\result == -1;\n// @ensures a.length > 0 ==> 0 <= \\result && \\result < a.length && (\\forall int i; 0 <= i && i < a.length; a[\\result] >= a[i]);",
    "CombineArrayIncorrect.combine": "// @public normal_behavior\n// @requires a != null\n// @requires b != null\n// @ensures \\result != null\n// @ensures \\result.length == a.length + b.length\n// @ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i])\n// @ensures (\\forall int j; 0 <= j && j < b.length; \\result[a.length + j] == b[j])",
    "Biggest.biggest": "//@ requires a != null;\n//@ ensures a.length == 0 ? \\result == -1 : \\result == (\\max int i; 0 <= i && i < a.length; a[i]);",
    "AddCorrect.add": "//@ public normal_behavior\n//@ ensures \\result == a + b",
    "IsCommonFactorIncorrect.isCommonFactor": "//@ public normal_behavior\n//@ requires factor >= 1;\n//@ ensures \\result == (a % factor == 0 && b % factor == 0);\n//@ also\n//@ public exceptional_behavior\n//@ requires factor < 1;\n//@ signals (IllegalArgumentException e) factor < 1;",
    "SmallestIncorrect.smallest": "// @ public normal_behavior\n// @ requires a != null;\n// @ ensures (a.length == 0 ==> \\result == -1) \n// @      && (a.length > 0 ==> (\\exists int i; 0 <= i && i < a.length; a[i] == \\result) \n// @                     && (\\forall int i; 0 <= i && i < a.length; \\result <= a[i]));",
    "AddIncorrect.add": "//@ public normal_behavior\n//@ ensures \\result == a + b",
    "IsCommonFactor.isCommonFactor": "//@ public normal_behavior\n//@ requires factor >= 1\n//@ ensures \\result == (a % factor == 0 && b % factor == 0)\n//@ also\n//@ public exceptional_behavior\n//@ requires factor < 1\n//@ signals (IllegalArgumentException e) factor < 1",
    "IndexOf.find": "//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target)\n//@           ==> (0 <= \\result && \\result < arr.length\n//@                && arr[\\result] == target\n//@                && (\\forall int j; 0 <= j && j < \\result; arr[j] != target));\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] != target)\n//@           ==> \\result == -1;",
    "AddWithMax.addWithMax": "//@ public normal_behavior\n//@ requires a + b <= 2000;\n//@ ensures \\result == a + b;\n//@ also public exceptional_behavior\n//@ requires a + b > 2000;\n//@ signals (IllegalArgumentException e) a + b > 2000;",
    "AddWithMaxIncorrect.addWithMax": "//@ public normal_behavior\n//@ requires a + b <= 2000\n//@ ensures \\result == a + b\n//@ also public exceptional_behavior\n//@ requires a + b > 2000\n//@ signals (IllegalArgumentException e) a + b > 2000",
    "DartIncorrect.calculateScore": "// @public normal_behavior\n// @requires number >= 1 && number <= 20;\n// @requires region >= 1 && region <= 3;\n// @requires currentScore - region * number >= 0;\n// @ensures \\result == currentScore - region * number;\n// @also public normal_behavior\n// @requires number >= 1 && number <= 20;\n// @requires region >= 1 && region <= 3;\n// @requires currentScore - region * number < 0;\n// @ensures \\result == currentScore;\n// @also public exceptional_behavior\n// @requires number < 1 || number > 20 || region < 1 || region > 3;\n// @signals (IllegalArgumentException e) number < 1 || number > 20 || region < 1 || region > 3;",
    "DivideIncorrect.divide": "// @public normal_behavior\n// @requires b != 0\n// @ensures \\result == a / b\n// @also public exceptional_behavior\n// @requires b == 0\n// @signals (ArithmeticException e) b == 0",
    "Dart.calculateScore": "// @requires number >= 1 && number <= 20;\n// @requires region >= 1 && region <= 3;\n// @requires currentScore >= 0 && currentScore <= 501;\n// @requires currentScore - number * region >= 0;\n// @ensures \\result == currentScore - number * region;\n// @also\n// @requires number >= 1 && number <= 20;\n// @requires region >= 1 && region <= 3;\n// @requires currentScore >= 0 && currentScore <= 501;\n// @requires currentScore - number * region < 0;\n// @ensures \\result == currentScore;\n// @also\n// @requires number < 1 || number > 20 || region < 1 || region > 3;\n// @signals (IllegalArgumentException e) number < 1 || number > 20 || region < 1 || region > 3",
    "MultiplyCorrect.multiply": "//@ public normal_behavior\n//@ ensures \\result == a * b",
    "MultiplyInCorrect.multiply": "//@ public normal_behavior\n//@ ensures \\result == a * b",
    "Divide.divide": "//@ public normal_behavior\n//@ requires b != 0;\n//@ ensures \\result == a / b;\n//@ also public exceptional_behavior\n//@ requires b == 0;\n//@ signals (ArithmeticException e) b == 0;",
    "CompareArray.compare": "//@ public normal_behavior\n//@ requires a != null\n//@ requires b != null\n//@ ensures \\result == (a.length == b.length && (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]))",
    "SubtractCorrect.subtract": "//@ public normal_behavior\n//@ ensures \\result == a - b",
    "SubtractInvalidOrder.subtract": "//@ public normal_behavior\n//@ ensures \\result == a - b",
    "Conjunction.conjunctOf": "// public normal_behavior\n// @ensures \\result == (b1 && b2)",
    "PowIncorrect.pow": "// @public normal_behavior\n// @requires a >= 0 && b >= 0 && a <= 10 && b <= 10\n// @ensures \\result == (\\product int i; 0 <= i && i < b; a)\n// @also public exceptional_behavior\n// @requires a < 0 || b < 0 || a > 10 || b > 10\n// @signals (IllegalArgumentException e) a < 0 || b < 0 || a > 10 || b > 10",
    "ConjunctionIncorrect.conjunctOf": "//@ public normal_behavior\n//@ ensures \\result == (b1 && b2)",
    "Disjunction.disjunctOf": "// @ requires true;\n// @ ensures \\result == (b1 || b2);",
    "CompareIntIncorrect.compareInt": "//@ public normal_behavior\n//@ ensures a == b   ==> \\result == 0;\n//@ ensures a  > b   ==> \\result  > 0;\n//@ ensures a  < b   ==> \\result  < 0;",
    "DisjunctionIncorrect.disjunctOf": "// @ requires true;\n// @ ensures \\result == (b1 || b2);",
    "XOR.xor": "//@ public normal_behavior\n//@ ensures \\result == ((b1 && !b2) || (!b1 && b2));",
    "XORIncorrect.xor": "//@ ensures \\result == (b1 && !b2) || (!b1 && b2);",
    "CompareInt.compareInt": "// public normal_behavior\n// ensures a == b   ==> \\result == 0\n// ensures a >  b   ==> \\result >  0\n// ensures a <  b   ==> \\result <  0",
    "RandomInt.randomInt": "//@ requires min <= max\n//@ ensures \\result >= min && \\result <= max\n//@also public exceptional_behavior\n//@ requires min > max\n//@ signals (IllegalArgumentException e) min > max",
    "RandomIntIncorrect.randomInt": "//@ requires min <= max;\n//@ ensures \\result >= min && \\result <= max;\n//@ also\n//@ requires min > max;\n//@ signals (IllegalArgumentException e) min > max",
    "StringIndexOfIncorrect.indexOf": "// @ public normal_behavior\n// @ requires s != null\n// @ ensures (\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result == (\\min int i; 0 <= i && i < s.length(); s.charAt(i) == sub)\n// @ ensures (\\forall int i; 0 <= i && i < s.length(); s.charAt(i) != sub) ==> \\result == -1",
    "AbsCorrect.abs": "// @public normal_behavior\n// @ensures a >= 0 ==> \\result == a\n// @ensures a < 0  ==> \\result == -a",
    "StringConcatIncorrect.concat": "//@ public normal_behavior\n//@ requires a != null;\n//@ requires b != null;\n//@ ensures \\result.length() == a.length() + b.length();\n//@ ensures (\\forall int i; 0 <= i && i < a.length(); \\result.charAt(i) == a.charAt(i));\n//@ ensures (\\forall int i; 0 <= i && i < b.length(); \\result.charAt(a.length() + i) == b.charAt(i));",
    "ComputeAreaIncorrect.computeArea": "//@ public normal_behavior\n//@ ensures \\result == (ax2 >= ax1 ? ax2 - ax1 : ax1 - ax2) * (ay2 >= ay1 ? ay2 - ay1 : ay1 - ay2);",
    "AbsIncorrect.abs": "//@ public normal_behavior\n//@ requires a >= 0;\n//@ ensures \\result == a;\n//@ also public normal_behavior\n//@ requires a < 0;\n//@ ensures \\result == -a;",
    "StringConcat.concat": "//@ public normal_behavior\n//@ requires a != null;\n//@ requires b != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length() == a.length() + b.length();",
    "IntSquareIncorrect.squareOf": "//@ public normal_behavior\n//@ ensures \\result == x * x",
    "CreditCardIncorrect.charge": "//@ requires amount >= 0;\n//@ ensures balance == \\old(balance) + amount;",
    "IntSquare.squareOf": "//@ public normal_behavior\n//@ ensures \\result == x * x",
    "CreditCard.charge": "//@ requires amount >= 0;\n//@ ensures this.balance == \\old(this.balance) + amount;\n//@ also\n//@ requires amount < 0;\n//@ signals (IllegalArgumentException e) amount < 0",
    "FactorialIncorrect.factorial": "//@ public normal_behavior\n//@ requires n >= 0 && n <= 10;\n//@ ensures \\result == (\\product int i; 1 <= i && i <= n; i);\n//@also public exceptional_behavior\n//@ requires n < 0;\n//@ signals (IllegalArgumentException e) n < 0\n//@also public exceptional_behavior\n//@ requires n > 10;\n//@ signals (IllegalArgumentException e) n > 10",
    "DigitRoot.digitRoot": "// requires number >= 0;\n// ensures \\result >= 0 && \\result <= 9;\n// signals (IllegalArgumentException e) number < 0;",
    "LeapYear.isLeapYear": "// @public normal_behavior\n// @ensures \\result <==> (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));",
    "Factorial.factorial": "//@ public normal_behavior\n//@ requires n >= 0 && n <= 10\n//@ ensures \\result == (\\product int i; 1 <= i && i <= n; i)\n//@ also public exceptional_behavior\n//@ requires n < 0\n//@ signals (IllegalArgumentException e) n < 0\n//@ also public exceptional_behavior\n//@ requires n > 10\n//@ signals (IllegalArgumentException e) n > 10",
    "Palindrom.isPalindrom": "// @public normal_behavior\n// @requires s != null;\n// @ensures \\result <==> (\\forall int i; 0 <= i && i < s.length(); s.charAt(i) == s.charAt(s.length() - 1 - i));\n// @also public exceptional_behavior\n// @requires s == null;\n// @signals (NullPointerException e) s == null;",
    "LeapYearIncorrect.isLeapYear": "//@ ensures \\result <==> ((year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0)));",
    "GenerateString.generateString": "//@ public normal_behavior\n//@ requires length >= 0;\n//@ ensures \\result != null;\n//@ ensures \\result.length() == length;\n//@ ensures (\\forall int i; 0 <= i && i < length; 'a' <= \\result.charAt(i) && \\result.charAt(i) <= 'z');\n//@ ensures length > 0 ==> \\result.charAt(0) == 'a';\n//@ ensures (\\forall int i; 0 <= i && i+1 < length; (\\result.charAt(i) == 'z' ? \\result.charAt(i+1) == 'a' : \\result.charAt(i+1) == \\result.charAt(i) + 1));",
    "GenerateStringIncorrectLength.generateString": "// @public normal_behavior\n// @requires length >= 0\n// @ensures \\result != null\n// @ensures \\result.length() == length\n// @ensures (\\forall int i; 0 <= i && i < \\result.length(); 'a' <= \\result.charAt(i) && \\result.charAt(i) <= 'z')\n// @ensures (\\forall int i; 0 <= i && i < \\result.length(); \\result.charAt(i) - 'a' == i % 26)\n// @also\n// @public exceptional_behavior\n// @requires length < 0\n// @signals (IllegalArgumentException e) length < 0",
    "PalindromIncorrect.isPalindrom": "// @requires s != null;\n// @ensures \\result == (\\forall int i; 0 <= i && i < s.length(); s.charAt(i) == s.charAt(s.length() - 1 - i));",
    "PrimeCheck.isPrime": "//@ public normal_behavior\n//@ ensures \\result <==> (n > 1 && (\\forall int i; 2 <= i && i < n; n % i != 0));",
    "SplitString.split": "// @public normal_behavior\n// @requires s != null;\n// @requires 0 <= index && index <= s.length();\n// @ensures \\result != null;\n// @ensures \\result.length == 2;\n// @ensures \\result[0].equals(s.substring(0, index));\n// @ensures \\result[1].equals(s.substring(index, s.length()));\n// @also public exceptional_behavior\n// @requires s != null;\n// @requires index < 0 || index > s.length();\n// @signals (StringIndexOutOfBoundsException e) index < 0 || index > s.length();",
    "StringLength.length": "//@ public normal_behavior\n//@ requires s != null\n//@ ensures \\result == s.length()\n//@ also public exceptional_behavior\n//@ requires s == null\n//@ signals (NullPointerException e) s == null",
    "StringLengthIncorrect.length": "//@ requires s != null;\n//@ ensures \\result == s.length();",
    "PrimeNumberGenerator.generatePrimes": "// @public normal_behavior\n// @requires n >= 0 && n <= 20\n// @ensures \\result != null\n// @ensures (\\forall int i; 0 <= i && i < \\result.length; 2 <= \\result[i] && \\result[i] <= n && (\\forall int d; 2 <= d && d*d <= \\result[i]; \\result[i] % d != 0))\n// @ensures \\result.length == (\\sum int k; 2 <= k && k <= n; (\\forall int d; 2 <= d && d*d <= k; k % d != 0) ? 1 : 0)\n// @also public exceptional_behavior\n// @requires n < 0 || n > 20\n// @signals (IllegalArgumentException e) n < 0 || n > 20",
    "SplitStringIncorrect.split": "//@ public normal_behavior\n//@ requires s != null;\n//@ requires 0 <= index && index <= s.length();\n//@ ensures \\result != null;\n//@ ensures \\result.length == 2;\n//@ ensures \\result[0].equals(s.substring(0, index));\n//@ ensures \\result[1].equals(s.substring(index));\n//@ also public exceptional_behavior\n//@ requires s == null;\n//@ signals (NullPointerException e) s == null;\n//@ also public exceptional_behavior\n//@ requires s != null && (index < 0 || index > s.length());\n//@ signals (IndexOutOfBoundsException e) index < 0 || index > s.length();",
    "ReverseStringIncorrect.reverse": "//@ requires s != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length() == s.length();\n//@ ensures (\\forall int i; 0 <= i && i < s.length(); \\result.charAt(i) == s.charAt(s.length() - 1 - i));",
    "ReverseString.reverse": "//@ requires s != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length() == s.length();\n//@ ensures (\\forall int i; 0 <= i && i < s.length(); \\result.charAt(i) == s.charAt(s.length() - 1 - i));",
    "ExceptionTestIncorrect.test": "//@ public normal_behavior\n//@ requires a <= 10\n//@ ensures \\result == a\n//@also public exceptional_behavior\n//@ requires a > 10\n//@ signals (IllegalArgumentException e) a > 10",
    "ExceptionTest.test": "//@ requires a <= 10;\n//@ ensures \\result == a;\n//@ also\n//@ requires a > 10;\n//@ signals (IllegalArgumentException e) a > 10;",
    "TemperaturesIncorrect.convertTemperature": "//@ public normal_behavior\n//@ ensures \\result != null;\n//@ ensures \\result.length == 3;\n//@ ensures \\result[0] == celsius;\n//@ ensures \\result[1] == celsius + 273.15;\n//@ ensures \\result[2] == celsius * 9.0/5.0 + 32.0;",
    "Temperatures.convertTemperature": "//@ public normal_behavior\n//@ requires celsius >= -273.15\n//@ ensures \\result != null\n//@ ensures \\result.length == 3\n//@ ensures \\result[0] == celsius\n//@ ensures \\result[1] == celsius + 273.15\n//@ ensures \\result[2] == celsius * 9.0/5.0 + 32.0\n//@ also public exceptional_behavior\n//@ requires celsius < -273.15\n//@ signals (IllegalArgumentException e) celsius < -273.15",
    "PrimeNumberGeneratorIncorrect.generatePrimes": "//@ public normal_behavior\n//@ requires 0 <= n && n <= 20;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; 2 <= \\result[i] && \\result[i] <= n && (\\forall int k; 2 <= k && k < \\result[i]; \\result[i] % k != 0));\n//@ ensures (\\forall int m; 2 <= m && m <= n; (\\forall int k; 2 <= k && k < m; m % k != 0) ==> (\\exists int j; 0 <= j && j < \\result.length && \\result[j] == m));\n//@ ensures (\\forall int i; 0 <= i && i+1 < \\result.length; \\result[i] < \\result[i+1]);\n//@ also public exceptional_behavior\n//@ requires n < 0 || n > 20;\n//@ signals (IllegalArgumentException e) n < 0 || n > 20;",
    "CopyOfRangeIncorrect.copyOfRange": "//@ public normal_behavior\n//@ requires original != null;\n//@ requires 0 <= from;\n//@ requires from <= original.length;\n//@ requires from <= to;\n//@ ensures \\result != null;\n//@ ensures \\result.length == to - from;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; (from + i < original.length) ? \\result[i] == original[from + i] : \\result[i] == 0);\n//@ also public exceptional_behavior\n//@ requires original != null;\n//@ requires from < 0 || from > original.length;\n//@ signals (ArrayIndexOutOfBoundsException e) from < 0 || from > original.length;\n//@ also public exceptional_behavior\n//@ requires original != null;\n//@ requires from > to;\n//@ signals (IllegalArgumentException e) from > to;",
    "CopyOfRange.copyOfRange": "//@ public normal_behavior\n//@ requires original != null;\n//@ requires from >= 0 && from <= original.length;\n//@ requires to >= from;\n//@ ensures \\result != null;\n//@ ensures \\result.length == to - from;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; (from + i < original.length ? \\result[i] == original[from + i] : \\result[i] == 0));\n//@ also public exceptional_behavior\n//@ requires original != null;\n//@ requires from < 0 || from > original.length;\n//@ signals (ArrayIndexOutOfBoundsException e) from < 0 || from > original.length;\n//@ also public exceptional_behavior\n//@ requires original != null;\n//@ requires from > to;\n//@ signals (IllegalArgumentException e) from > to;",
    "CombineArray.combine": "//@ public normal_behavior\n//@ requires a != null;\n//@ requires b != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length == a.length + b.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i]);\n//@ ensures (\\forall int j; 0 <= j && j < b.length; \\result[a.length + j] == b[j]);",
    "SubstringIncorrect.substring": "//@ public normal_behavior\n//@ requires s != null;\n//@ requires 0 <= start && end <= s.length();\n//@ requires start <= end;\n//@ ensures \\result.length() == end - start;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length(); \\result.charAt(i) == s.charAt(start + i));\n//@ also public exceptional_behavior\n//@ requires s != null;\n//@ requires start < 0 || end > s.length();\n//@ signals (IndexOutOfBoundsException e) start < 0 || end > s.length();\n//@ also public exceptional_behavior\n//@ requires s != null;\n//@ requires start > end;\n//@ signals (IllegalArgumentException e) start > end;",
    "BubbleSortIncorrect.bubbleSort": "// @requires arr != null;\n// @ensures \\result != arr;\n// @ensures \\result.length == arr.length;\n// @ensures (\\forall int i; 0 <= i && i + 1 < \\result.length; \\result[i] <= \\result[i+1]);\n// @ensures (\\forall int k; 0 <= k && k < arr.length; arr[k] == \\old(arr[k]));\n// @ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < \\result.length; \\result[j] == \\old(arr[i])));\n// @ensures (\\forall int j; 0 <= j && j < \\result.length; (\\exists int i; 0 <= i && i < arr.length; \\result[j] == \\old(arr[i])));",
    "Pow.pow": "// @ public normal_behavior\n// @ requires a >= 0 && b >= 0 && a <= 10 && b <= 10;\n// @ ensures \\result == (\\product int i; 0 <= i && i < b; a);\n// @ also public exceptional_behavior\n// @ requires a < 0 || b < 0 || a > 10 || b > 10;\n// @ signals_only IllegalArgumentException\n// @ signals (IllegalArgumentException e) a < 0 || b < 0 || a > 10 || b > 10",
    "StringIndexOf.indexOf": "// public normal_behavior\n// requires s != null;\n// ensures (\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub);\n// ensures \\result >= 0 && \\result < s.length();\n// ensures s.charAt(\\result) == sub;\n// ensures (\\forall int j; 0 <= j && j < \\result; s.charAt(j) != sub);\n// also\n// public normal_behavior\n// requires s != null;\n// ensures (\\forall int i; 0 <= i && i < s.length(); s.charAt(i) != sub);\n// ensures \\result == -1;",
    "Withdraw.withdraw": "//@ public normal_behavior\n//@ requires balance >= 0;\n//@ requires amount >= 0;\n//@ requires amount <= balance;\n//@ ensures \\result == balance - amount;\n//@ also public exceptional_behavior\n//@ requires amount < 0;\n//@ signals (IllegalArgumentException e) amount < 0;\n//@ also public exceptional_behavior\n//@ requires amount > balance;\n//@ signals (IllegalArgumentException e) amount > balance;\n//@ also public exceptional_behavior\n//@ requires balance < 0;\n//@ signals (IllegalArgumentException e) balance < 0;\n//@ also public exceptional_behavior\n//@ requires balance - amount < 0;\n//@ signals (IllegalArgumentException e) balance - amount < 0;",
    "PrimeCheckIncorrect.isPrime": "//@ public normal_behavior\n//@ ensures \\result == (n > 1 && (\\forall int i; 2 <= i && i < n; n % i != 0))",
    "ParseBooleanIncorrect.parse": "// @ public normal_behavior\n// @ requires inputString != null && (inputString.length() == 4 || inputString.length() == 5);\n// @ ensures (inputString.equalsIgnoreCase(\"true\") && \\result == true) ||\n// @         (inputString.equalsIgnoreCase(\"false\") && \\result == false);\n// @ also public exceptional_behavior\n// @ requires inputString == null || !(inputString.length() == 4 || inputString.length() == 5);\n// @ signals (IllegalArgumentException e) inputString == null || !(inputString.length() == 4 || inputString.length() == 5);",
    "Substring.substring": "//@ public normal_behavior\n//@ requires s != null\n//@ requires 0 <= start && start <= end && end <= s.length()\n//@ ensures \\result != null\n//@ ensures \\result.length() == end - start\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length(); \\result.charAt(i) == s.charAt(start + i))\n//@ also public exceptional_behavior\n//@ requires s != null\n//@ requires start < 0 || end > s.length()\n//@ signals (IndexOutOfBoundsException e) start < 0 || end > s.length()\n//@ also public exceptional_behavior\n//@ requires s != null\n//@ requires start > end\n//@ signals (IllegalArgumentException e) start > end",
    "ComputeArea.computeArea": "//@ public normal_behavior\n//@ ensures \\result == (ax1 >= ax2 ? ax1 - ax2 : ax2 - ax1) * (ay1 >= ay2 ? ay1 - ay2 : ay2 - ay1);",
    "WithdrawIncorrect.withdraw": "//@ public normal_behavior\n//@ requires balance >= 0;\n//@ requires amount >= 0;\n//@ requires amount <= balance;\n//@ ensures \\result == balance - amount;\n//@ also public exceptional_behavior\n//@ requires amount < 0;\n//@ signals (IllegalArgumentException e) amount < 0;\n//@ also public exceptional_behavior\n//@ requires amount > balance;\n//@ signals (IllegalArgumentException e) amount > balance;\n//@ also public exceptional_behavior\n//@ requires balance < 0;\n//@ signals (IllegalArgumentException e) balance < 0;\n//@ also public exceptional_behavior\n//@ requires balance - amount < 0;\n//@ signals (IllegalArgumentException e) balance - amount < 0;",
    "ParseBoolean.parse": "// @ public normal_behavior\n// @ requires inputString != null;\n// @ requires inputString.length() == 4 || inputString.length() == 5;\n// @ ensures inputString.equalsIgnoreCase(\"true\")  ==> \\result == true;\n// @ ensures inputString.equalsIgnoreCase(\"false\") ==> \\result == false;\n// @ also public exceptional_behavior\n// @ requires inputString == null || (inputString != null && inputString.length() != 4 && inputString.length() != 5);\n// @ signals (IllegalArgumentException e) inputString == null || (inputString.length() != 4 && inputString.length() != 5)",
    "GreatestCommonDivisorIncorrect.getGreatestCommonDivisor": "// public normal_behavior\n// @requires y1 <= 0 || y2 <= 0\n// @ensures \\result == 0\n// @also public normal_behavior\n// @requires y1 > 0 && y2 > 0\n// @ensures \\result > 0\n// @ensures y1 % \\result == 0 && y2 % \\result == 0\n// @ensures (\\forall int d; d > 0 && y1 % d == 0 && y2 % d == 0; d <= \\result)",
    "GreatestCommonDivisor.getGreatestCommonDivisor": "// @public normal_behavior\n// @requires y1 > 0 && y2 > 0;\n// @ensures \\result >= 1;\n// @ensures \\result <= y1 && \\result <= y2;\n// @ensures y1 % \\result == 0 && y2 % \\result == 0;\n// @ensures (\\forall int d; d > 0 && d <= y1 && d <= y2 && y1 % d == 0 && y2 % d == 0; d <= \\result);\n// @also\n// @public normal_behavior\n// @requires y1 <= 0 || y2 <= 0;\n// @ensures \\result == 0;"
}