{
    "DistinctArrayIncorrect.isDistinct": "// @ requires arr != null;\n// @ ensures \\result <==> (\\forall int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j; arr[i] != arr[j]);",
    "LastIndexOfIncorrect.lastIndexOf": "// @ requires arr != null;\n// @ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> \n// @            (\\result == (\\max int i; 0 <= i && i < arr.length && arr[i] == element; i));\n// @ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> (\\result == -1);\n// @ ensures -1 <= \\result && \\result < arr.length;",
    "SetZero.setZero": "// @ requires a != null;\n// @ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n// @ ensures \\result != null;\n// @ ensures \\result.length == a.length;\n// @ ensures (\\forall int i; 0 <= i && i < a.length;\n//        (iBegin <= i && i <= iEnd) ==> \\result[i] == 0\n//     && (i < iBegin || i > iEnd) ==> \\result[i] == a[i]);\n// @ ensures (\\forall int i; 0 <= i && i < a.length; a[i] == \\old(a[i]));",
    "IsAscending.isAscending": "// @ requires arr != null;\n// @ ensures (\\result == true) <==>\n// @   (arr.length < 2 ||\n// @     (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i+1]));\n// @ ensures (\\result == false) <==>\n// @   (arr.length >= 2 && (\\exists int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]));",
    "IndexOfIncorrect.find": "// @ requires arr != null;\n// @ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == (\\min int i; 0 <= i && i < arr.length && arr[i] == target; i);\n// @ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == -1;",
    "IsAscendingIncorrect.isAscending": "// @ requires arr != null;\n// @ ensures (\\result == true) <==>\n// @   (arr.length < 2 ||\n// @    (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i+1]));\n// @ ensures (\\result == false) <==>\n// @   (arr.length >= 2 && (\\exists int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]));",
    "IsDescending.isDescending": "// @ requires arr != null;\n// @ ensures (\\result == true) <==>\n// @   (arr.length < 2 ||\n// @    (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] > arr[i+1]));\n// @ ensures (\\result == false) <==>\n// @   (arr.length >= 2 &&\n// @    (\\exists int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i+1]));",
    "IsDescendingIncorrect.isDescending": "// @ requires arr != null;\n// @ ensures (\\result == true <==>\n// @             (arr.length < 2 ||\n// @                 (\\forall int i; 0 <= i && i < arr.length - 1; arr[i+1] < arr[i])\n// @             )\n// @         );",
    "ReverseArrayIncorrect.reverse": "// @ requires a != null;\n// @ ensures \\result != null && \\result.length == a.length;\n// @ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[a.length-1-i]);",
    "RemoveElementsIncorrect.removeElement": "// @ requires arr != null;\n// @ ensures (\\forall int i; 0 <= i < \\result.length; \\result[i] != b);\n// @ ensures (\\forall int i; 0 <= i < arr.length; arr[i] != b ==> (\\exists int j; 0 <= j < \\result.length; \\result[j] == arr[i]));\n// @ ensures (\\forall int i; 0 <= i < \\result.length; (\\exists int j; 0 <= j < arr.length; arr[j] == \\result[i] && arr[j] != b));\n// @ ensures (\\result.length == (\\sum int i; 0 <= i < arr.length; arr[i] != b ? 1 : 0));",
    "ReverseArray.reverse": "// @requires a != null;\n// @ensures \\result != null && \\result.length == a.length;\n// @ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[a.length - 1 - i]);",
    "RemoveElements.removeElement": "// @ requires arr != null;\n// @ ensures (\\forall int i; 0 <= i < \\result.length; \\result[i] != b);\n// @ ensures (\\forall int i; 0 <= i < arr.length; (arr[i] != b) ==> (\\exists int j; 0 <= j < \\result.length; \\result[j] == arr[i]));\n// @ ensures \\result.length == (\\sum int i; 0 <= i < arr.length; arr[i] != b ? 1 : 0);",
    "SetZeroIncorrectLength.setZero": "// @ requires a != null;\n// @ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n// @ ensures \\result != null && \\result.length == a.length;\n// @ ensures (\\forall int i; 0 <= i && i < a.length;\n// @             (iBegin <= i && i <= iEnd ==> \\result[i] == 0) &&\n// @             ((i < iBegin || i > iEnd) ==> \\result[i] == a[i]));",
    "ContainsDuplicateIncorrect.containsDuplicate": "// @ requires nums != null;\n// @ ensures \\result <==> (\\exists int i, j; 0 <= i && i < j && j < nums.length; nums[i] == nums[j]);",
    "ContainsDuplicate.containsDuplicate": "// @ requires nums != null;\n// @ ensures \\result == (\\exists int i, j; 0 <= i && i < nums.length && 0 <= j && j < nums.length && i != j; nums[i] == nums[j]);",
    "LastIndexOf.lastIndexOf": "// @ requires arr != null;\n// @ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==>\n// @             (\\result == (\\max int i; 0 <= i && i < arr.length && arr[i] == element; i));\n// @ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> (\\result == -1);\n// @ ensures -1 <= \\result && \\result < arr.length;",
    "CompareArrayIncorrect.compare": "// @ requires a != null && b != null;\n// @ ensures \\result <==> (a.length == b.length && (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]));",
    "DistinctArray.isDistinct": "// @ requires arr != null;\n// @ ensures (\\result == (\\forall int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j; arr[i] != arr[j]));",
    "FindFirstZeroIncorrect.findFirstZero": "// @ requires arr != null;\n// @ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == (\\min int i; 0 <= i && i < arr.length && arr[i] == 0; i);\n// @ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == -1;",
    "FindFirstZero.findFirstZero": "// @ requires arr != null;\n// @ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \n// @             (\\result == (\\min int i; 0 <= i && i < arr.length && arr[i] == 0; i));\n// @ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> (\\result == -1);",
    "Smallest.smallest": "// @ requires a != null;\n// @ ensures a.length == 0 ==> \\result == -1;\n// @ ensures a.length > 0 ==> (\\exists int i; 0 <= i && i < a.length; a[i] == \\result) && (\\forall int j; 0 <= j && j < a.length; \\result <= a[j]);",
    "BubbleSort.bubbleSort": "// @ requires arr != null;\n// @ ensures \\result != null;\n// @ ensures \\result.length == arr.length;\n// @ ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < arr.length; \\result[i] == arr[j]));\n// @ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] <= \\result[i+1]);\n// @ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] == \\old(arr[i]));",
    "BiggestIncorrect.biggest": "// @ requires a != null;\n// @ ensures (\\forall int i; 0 <= i && i < a.length; a[result] >= a[i]) && 0 <= result && result < a.length ==> a.length > 0;\n// @ ensures (a.length == 0) ==> result == -1;\n// @ ensures (a.length > 0) ==> (0 <= result && result < a.length);\n// @ ensures (a.length > 0) ==> (\\forall int i; 0 <= i && i < a.length; a[result] >= a[i]);",
    "CombineArrayIncorrect.combine": "// @ requires a != null && b != null;\n// @ ensures \\result != null;\n// @ ensures \\result.length == a.length + b.length;\n// @ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i]);\n// @ ensures (\\forall int i; 0 <= i && i < b.length; \\result[a.length + i] == b[i]);",
    "Biggest.biggest": "// @ requires a != null;\n// @ ensures (a.length == 0 ==> \\result == -1) && \n// @         (a.length > 0 ==> (\\exists int i; 0 <= i && i < a.length; a[i] == \\result && (\\forall int j; 0 <= j && j < a.length; a[j] <= \\result)));",
    "AddCorrect.add": "// @ requires true;\n// @ ensures \\result == a + b;",
    "IsCommonFactorIncorrect.isCommonFactor": "// @ requires true;\n// @ ensures (factor < 1) ==> false;\n// @ signals (IllegalArgumentException e) factor < 1;\n// @ ensures (factor >= 1) ==> \n// @     \\result == ((a % factor == 0) && (b % factor == 0));",
    "SmallestIncorrect.smallest": "// @ requires a != null;\n// @ ensures (a.length == 0 ==> \\result == -1);\n// @ ensures (a.length > 0 ==> (\\exists int i; 0 <= i && i < a.length; \\result == a[i] && (\\forall int j; 0 <= j && j < a.length; a[j] >= \\result)));",
    "AddIncorrect.add": "// @ requires true;\n// @ ensures \\result == a + b;",
    "IsCommonFactor.isCommonFactor": "// @ requires factor >= 1;\n// @ ensures \\result <==> (a % factor == 0 && b % factor == 0);\n// @ signals (IllegalArgumentException e) factor < 1;",
    "IndexOf.find": "// @ requires arr != null;\n// @ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==>\n// @             \\result == (\\min int i; 0 <= i && i < arr.length && arr[i] == target; i);\n// @ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == -1;\n// @ ensures (\\result >= 0 && \\result < arr.length) ==> arr[\\result] == target;",
    "AddWithMax.addWithMax": "// @ requires true;\n// @ ensures (\\result == a + b) && (a + b <= 2000);\n// @ signals (IllegalArgumentException e) (a + b > 2000);",
    "AddWithMaxIncorrect.addWithMax": "// @requires true;\n// @ensures (\\result == a + b) && (a + b <= 2000);\n// @signals (IllegalArgumentException e) (a + b > 2000);",
    "DartIncorrect.calculateScore": "// @ requires 1 <= number && number <= 20;\n// @ requires 1 <= region && region <= 3;\n// @ requires 0 <= currentScore && currentScore <= 501;\n// @ ensures (currentScore - (number * region) < 0) ==> \\result == currentScore;\n// @ ensures (currentScore - (number * region) >= 0) ==> \\result == currentScore - (number * region);\n// @ signals (IllegalArgumentException e) !(1 <= number && number <= 20) || !(1 <= region && region <= 3);",
    "DivideIncorrect.divide": "// @ requires b != 0;\n// @ ensures \\result == a / b;\n// @ signals (ArithmeticException e) b == 0;",
    "Dart.calculateScore": "// @ requires 1 <= number && number <= 20;\n// @ requires 1 <= region && region <= 3;\n// @ requires 0 <= currentScore && currentScore <= 501;\n// @ signals (IllegalArgumentException e) number < 1 || number > 20 || region < 1 || region > 3;\n// @ ensures\n// @   (currentScore - (number * region) < 0) ==> \\result == currentScore;\n// @ ensures\n// @   (currentScore - (number * region) >= 0) ==> \\result == (currentScore - (number * region));",
    "MultiplyCorrect.multiply": "// @ requires true;\n// @ ensures \\result == a * b;",
    "MultiplyInCorrect.multiply": "// @requires true;\n// @ensures \\result == a * b;",
    "Divide.divide": "// @requires b != 0;\n// @ensures \\result == a / b;\n// @signals (ArithmeticException e) b == 0;",
    "CompareArray.compare": "// @ requires a != null && b != null;\n// @ ensures \\result == (a.length == b.length && (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]));",
    "SubtractCorrect.subtract": "// @ requires true; ensures \\result == a - b;",
    "SubtractInvalidOrder.subtract": "// @ requires true;\n// @ ensures \\result == a - b;",
    "Conjunction.conjunctOf": "// @requires true;\n// @ensures \\result == (b1 && b2);",
    "PowIncorrect.pow": "// @ requires a >= 0 && b >= 0;\n// @ requires a <= 10 && b <= 10;\n// @ ensures (b == 0) ==> \\result == 1;\n// @ ensures (b != 0) ==> (\\exists int r; r == \\result; (\\forall int i; 0 <= i && i < b; r == r * a));\n// @ signals (IllegalArgumentException e) (a < 0 || b < 0 || a > 10 || b > 10);",
    "ConjunctionIncorrect.conjunctOf": "// @ requires true;\n// @ ensures \\result == (b1 && b2);",
    "Disjunction.disjunctOf": "// @ requires true;\n// @ ensures \\result == (b1 || b2);",
    "CompareIntIncorrect.compareInt": "// @ requires true;\n// @ ensures (a == b ==> \\result == 0) && (a > b ==> \\result > 0) && (a < b ==> \\result < 0);",
    "DisjunctionIncorrect.disjunctOf": "// @ requires true;\n// @ ensures \\result == (b1 || b2);",
    "XOR.xor": "// @ requires true;\n// @ ensures (\\result == ((b1 && !b2) || (!b1 && b2)));",
    "XORIncorrect.xor": "// @ requires true;\n// @ ensures (\\result && !(b1 && b2)) || (!\\result && (b1 == b2));",
    "CompareInt.compareInt": "// @ requires true;\n// @ ensures\n//     (\\result == 0 <==> a == b) &&\n//     (\\result > 0 <==> a > b) &&\n//     (\\result < 0 <==> a < b);",
    "RandomInt.randomInt": "// @requires min <= max;\n// @ensures \\result >= min && \\result <= max;\n// @signals (IllegalArgumentException e) min > max;",
    "RandomIntIncorrect.randomInt": "// @requires min <= max;\n// @ensures \\result >= min && \\result <= max;\n// @signals (IllegalArgumentException e) min > max;",
    "StringIndexOfIncorrect.indexOf": "// @ requires s != null;\n// @ ensures (\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result == (\\min int i; 0 <= i && i < s.length() && s.charAt(i) == sub; i);\n// @ ensures !(\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result == -1;",
    "AbsCorrect.abs": "// @ requires true;\n// @ ensures \\result == (a >= 0 ? a : -a);",
    "StringConcatIncorrect.concat": "// @requires a != null && b != null;\n// @ensures \\result != null && \\result.equals(a + b);",
    "ComputeAreaIncorrect.computeArea": "// @ requires ax1 <= ax2 && ay1 <= ay2;\n// @ ensures \\result == (ax2 - ax1) * (ay2 - ay1);",
    "AbsIncorrect.abs": "// @ requires true;\n// @ ensures \\result == (a < 0 ? -a : a);",
    "StringConcat.concat": "// @requires a != null && b != null;\n// @ensures \\result != null && \\result.equals(a.concat(b));",
    "IntSquareIncorrect.squareOf": "// @ requires true;\n// @ ensures \\result == x * x;",
    "CreditCardIncorrect.charge": "// @requires amount >= 0;\n// @ensures balance == \\old(balance) + amount;",
    "IntSquare.squareOf": "// @ requires true;\n// @ ensures \\result == x * x;",
    "CreditCard.charge": "// @requires amount >= 0;\n// @ensures balance == \\old(balance) + amount;",
    "FactorialIncorrect.factorial": "// @ requires n >= 0 && n <= 10;\n// @ ensures \\result == (\\product int i; 1 <= i && i <= n; i);\n// @ signals (IllegalArgumentException e) n < 0 || n > 10;",
    "DigitRoot.digitRoot": "// requires number >= 0;\n// ensures \\result >= 0 && \\result <= 9;\n// signals (IllegalArgumentException e) number < 0;",
    "LeapYear.isLeapYear": "//@ requires true;\n//@ ensures \\result == ((year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0)));",
    "Factorial.factorial": "// @requires 0 <= n && n <= 10;\n// @ensures \\result == (\\product int i; 1 <= i && i <= n; i);\n// @signals (IllegalArgumentException e) n < 0 || n > 10;",
    "Palindrom.isPalindrom": "// @ requires s != null;\n// @ ensures (\\result == true) <==> (\\forall int i; 0 <= i && i < s.length() / 2; s.charAt(i) == s.charAt(s.length() - 1 - i));",
    "LeapYearIncorrect.isLeapYear": "// @ requires true;\n// @ ensures \\result == ((year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0)));",
    "GenerateString.generateString": "// @requires length >= 0;\n// @ensures \\result != null;\n// @ensures \\result.length() == length;\n// @ensures (\\forall int i; 0 <= i && i < length; \n//     \\result.codePointAt(i) >= 97 && \\result.codePointAt(i) <= 122);",
    "GenerateStringIncorrectLength.generateString": "// @ requires length >= 0;\n// @ ensures \\result.length() == length;\n// @ ensures (\\forall int i; 0 <= i && i < length; \\result.charAt(i) == ('a' + (i % 26)));",
    "PalindromIncorrect.isPalindrom": "// @ requires s != null;\n// @ ensures \\result == (\\forall int i; 0 <= i && i < s.length() / 2; s.charAt(i) == s.charAt(s.length() - 1 - i));",
    "PrimeCheck.isPrime": "// @ requires n >= 0;\n// @ ensures \\result <==> (\\forall int i; 2 <= i && i <= n / 2; n % i != 0) && n >= 2;",
    "SplitString.split": "// @ requires s != null;\n// @ requires 0 <= index && index <= s.length();\n// @ ensures \\result != null;\n// @ ensures \\result.length == 2;\n// @ ensures \\result[0].equals(s.substring(0, index));\n// @ ensures \\result[1].equals(s.substring(index));",
    "StringLength.length": "// @ requires s != null;\n// @ ensures \\result == s.length();",
    "StringLengthIncorrect.length": "// @ requires s != null;\n// @ ensures \\result == s.length();",
    "PrimeNumberGenerator.generatePrimes": "// @ requires 0 <= n && n <= 20;\n// @ ensures (\\forall int i; 0 <= i && i < \\result.length; isPrime(\\result[i]));\n// @ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] < \\result[i+1]);\n// @ ensures (\\forall int i; 0 <= i && i < \\result.length; \\result[i] <= n);\n// @ signals (IllegalArgumentException) n < 0 || n > 20;",
    "SplitStringIncorrect.split": "// @ requires s != null;\n// @ requires 0 <= index && index <= s.length();\n// @ ensures \\result != null && \\result.length == 2;\n// @ ensures \\result[0].equals(s.substring(0, index));\n// @ ensures \\result[1].equals(s.substring(index));",
    "ReverseStringIncorrect.reverse": "// @requires s != null;\n// @ensures \\result != null && \\result.length() == s.length() &&\n//          (\\forall int i; 0 <= i && i < s.length(); \\result.charAt(i) == s.charAt(s.length() - 1 - i));",
    "ReverseString.reverse": "// @ requires s != null;\n// @ ensures \\result != null && \\result.length() == s.length()\n// @      && (\\forall int i; 0 <= i && i < s.length(); \\result.charAt(i) == s.charAt(s.length() - 1 - i));",
    "ExceptionTestIncorrect.test": "// @requires a <= 10;\n// @ensures \\result == a;\n// @signals (IllegalArgumentException e) a > 10;",
    "ExceptionTest.test": "// @ requires true;\n// @ ensures (a <= 10) ==> \\result == a;\n// @ signals (IllegalArgumentException e) a > 10;",
    "TemperaturesIncorrect.convertTemperature": "// @requires true;\n// @ensures \\result.length == 3\n//       && \\result[0] == celsius\n//       && \\result[1] == celsius + 273.15\n//       && \\result[2] == (celsius * 9.0/5.0) + 32;",
    "Temperatures.convertTemperature": "// @ requires celsius >= -273.15;\n// @ ensures \\result.length == 3;\n// @ ensures \\result[0] == celsius;\n// @ ensures \\result[1] == celsius + 273.15;\n// @ ensures \\result[2] == celsius * 9.0 / 5.0 + 32.0;\n// @ signals (IllegalArgumentException e) celsius < -273.15;",
    "PrimeNumberGeneratorIncorrect.generatePrimes": "// @ requires n >= 0 && n <= 20;\n// @ ensures (\\forall int i; 0 <= i && i < \\result.length; isPrime(\\result[i]));\n// @ ensures (\\forall int i; 0 <= i && i < \\result.length; \\result[i] <= n);\n// @ ensures (\\forall int i, j; 0 <= i && i < j && j < \\result.length; \\result[i] < \\result[j]);\n// @ signals (IllegalArgumentException e) n < 0 || n > 20;",
    "CopyOfRangeIncorrect.copyOfRange": "//  @ requires original != null;\n//  @ requires 0 <= from && from <= original.length;\n//  @ requires from <= to;\n//  @ ensures \\result != null;\n//  @ ensures \\result.length == to - from;\n//  @ ensures (\\forall int i; 0 <= i && i < \\result.length;\n//  @             (from + i < original.length ==> \\result[i] == original[from + i])\n//  @         && (from + i >= original.length ==> \\result[i] == 0));\n//  @ signals (ArrayIndexOutOfBoundsException e) from < 0 || from > original.length;\n//  @ signals (IllegalArgumentException e) from > to;",
    "CopyOfRange.copyOfRange": "// @ requires original != null;\n// @ requires 0 <= from && from <= original.length;\n// @ requires from <= to;\n// @ ensures \\result != null;\n// @ ensures \\result.length == to - from;\n// @ ensures (\\forall int i; 0 <= i && i < \\result.length;\n// @     (from + i < original.length ==> \\result[i] == original[from + i]) &&\n// @     (from + i >= original.length ==> \\result[i] == 0));\n// @ signals (ArrayIndexOutOfBoundsException e) from < 0 || from > original.length;\n// @ signals (IllegalArgumentException e) from > to;",
    "CombineArray.combine": "// @ requires a != null && b != null;\n// @ ensures \\result != null;\n// @ ensures \\result.length == a.length + b.length;\n// @ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i]);\n// @ ensures (\\forall int j; 0 <= j && j < b.length; \\result[a.length + j] == b[j]);",
    "SubstringIncorrect.substring": "// @ requires s != null;\n// @ requires 0 <= start && end <= s.length();\n// @ requires start <= end;\n// @ ensures \\result.equals(s.substring(start, end));\n// @ signals (IndexOutOfBoundsException e) (start < 0 || end > s.length());\n// @ signals (IllegalArgumentException e) (start > end);",
    "BubbleSortIncorrect.bubbleSort": "// @ requires arr != null;\n// @ ensures \\result != null;\n// @ ensures \\result.length == arr.length;\n// @ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] <= \\result[i+1]);\n// @ ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < \\result.length; arr[i] == \\result[j]));\n// @ ensures (\\forall int j; 0 <= j && j < \\result.length; (\\exists int i; 0 <= i && i < arr.length; \\result[j] == arr[i]));\n// @ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] == \\old(arr[i]));",
    "Pow.pow": "// @ requires a >= 0 && b >= 0;\n// @ requires a <= 10 && b <= 10;\n// @ ensures (b == 0) ==> (\\result == 1);\n// @ ensures (b != 0) ==> (\\result == mathPow(a, b));\n// @ signals (IllegalArgumentException e) (a < 0 || b < 0 || a > 10 || b > 10);",
    "StringIndexOf.indexOf": "// @ requires s != null;\n// @ ensures (\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result == (\\min int i; 0 <= i && i < s.length() && s.charAt(i) == sub; i);\n// @ ensures !(\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result == -1;",
    "Withdraw.withdraw": "// @ requires balance >= 0;\n// @ requires amount >= 0;\n// @ requires amount <= balance;\n// @ ensures \\result == balance - amount;\n// @ ensures \\result >= 0;\n// @ signals (IllegalArgumentException e) amount < 0;\n// @ signals (IllegalArgumentException e) amount > balance;\n// @ signals (IllegalArgumentException e) balance < 0;\n// @ signals (IllegalArgumentException e) balance - amount < 0;",
    "PrimeCheckIncorrect.isPrime": "// @ requires n >= 0;\n// @ ensures \\result <==> (\\forall int i; 2 <= i && i <= n/2; n % i != 0) && n >= 2;",
    "ParseBooleanIncorrect.parse": "// @ requires inputString != null;\n// @ requires inputString == \"true\" || inputString == \"TRUE\" || inputString == \"false\" || inputString == \"FALSE\";\n// @ ensures \\result <==> (inputString == \"true\" || inputString == \"TRUE\");\n// @ ensures !\\result <==> (inputString == \"false\" || inputString == \"FALSE\");\n// @ signals (IllegalArgumentException e) inputString == null || !(inputString == \"true\" || inputString == \"TRUE\" || inputString == \"false\" || inputString == \"FALSE\");",
    "Substring.substring": "// @requires s != null;\n// @requires 0 <= start && end <= s.length();\n// @requires start <= end;\n// @ensures \\result.equals(s.substring(start, end));\n// @signals (IndexOutOfBoundsException e) (start < 0 || end > s.length());\n// @signals (IllegalArgumentException e) (start > end);",
    "ComputeArea.computeArea": "// @ requires ax1 <= ax2 && ay1 <= ay2;\n// @ ensures \\result == (ax2 - ax1) * (ay2 - ay1);",
    "WithdrawIncorrect.withdraw": "// @ requires balance >= 0;\n// @ requires amount >= 0;\n// @ requires amount <= balance;\n// @ ensures \\result == balance - amount;\n// @ ensures \\result >= 0;\n// @ signals (IllegalArgumentException e) balance < 0;\n// @ signals (IllegalArgumentException e) amount < 0;\n// @ signals (IllegalArgumentException e) amount > balance;\n// @ signals (IllegalArgumentException e) balance - amount < 0;",
    "ParseBoolean.parse": "// @ requires inputString != null;\n// @ requires inputString == \"true\" || inputString == \"TRUE\" || inputString == \"false\" || inputString == \"FALSE\";\n// @ ensures (\\result == true) <==> (inputString == \"true\" || inputString == \"TRUE\");\n// @ ensures (\\result == false) <==> (inputString == \"false\" || inputString == \"FALSE\");\n// @ signals (IllegalArgumentException e) inputString == null || !(inputString == \"true\" || inputString == \"TRUE\" || inputString == \"false\" || inputString == \"FALSE\");",
    "GreatestCommonDivisorIncorrect.getGreatestCommonDivisor": "// @requires y1 > 0 && y2 > 0;\r\n// @ensures (y1 <= 0 || y2 <= 0) ==> \\result == 0;\r\n// @ensures (y1 > 0 && y2 > 0) ==> (\\result > 0 && y1 % \\result == 0 && y2 % \\result == 0 && (\\forall int k; k > 0 && k <= y1 && k <= y2; (y1 % k == 0 && y2 % k == 0) ==> k <= \\result));",
    "GreatestCommonDivisor.getGreatestCommonDivisor": "// @ requires y1 > 0 && y2 > 0;\n// @ ensures \\result > 0 && y1 % \\result == 0 && y2 % \\result == 0 &&\n// @         (\\forall int d; d > 0 && y1 % d == 0 && y2 % d == 0; d <= \\result);\n// @ also\n// @ requires y1 <= 0 || y2 <= 0;\n// @ ensures \\result == 0;"
}