{
    "Abs.abs": "```\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "AbsMinus.abs": "```\n//@requires true;\n//@ensures \\result == (a >= 0 ? a : -a);\n```",
    "AbsSameValue.abs": "```java\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "AddCorrect.add": "```\n//@ requires true;\n//@ ensures \\result == a + b;\n```",
    "AddIncorrect.add": "```java\n//@ requires true;\n//@ ensures \\result == a + b;\n```",
    "IntSquare.squareOf": "```\n//@ requires true;\n//@ ensures \\result == x * x;\n```",
    "IntSquareIncorrect.squareOf": "```\n//@ requires true;\n//@ ensures \\result == x * x;\n```",
    "MultiplyCorrect.multiply": "```\n//@ requires true;\n//@ ensures \\result == a * b;\n```",
    "MultiplyInCorrect.multiply": "```java\n//@ requires true;\n//@ ensures \\result == a * b;\n```",
    "SubtractCorrect.subtract": "```java\n//@ requires true;\n//@ ensures \\result == a - b;\n```",
    "SubtractInvalidOrder.subtract": "```java\n//@requires true;\n//@ensures \\result == a - b;\n```",
    "CompareArray.compare": "```java\n//@ requires a != null && b != null;\n//@ ensures \\result == (a.length == b.length && (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]));\n```",
    "CompareArrayIncorrect.compare": "```java\n//@ requires a != null && b != null;\n//@ ensures (\\result == true) <==> (a.length == b.length && (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]));\n```",
    "Conjunction.conjunctOf": "```java\n//@ requires true;\n//@ ensures \\result == (b1 && b2);\n```",
    "ConjunctionIncorrect.conjunctOf": "```java\n//@ requires true;\n//@ ensures \\result == (b1 && b2);\n```",
    "Disjunction.disjunctOf": "```\n//@ requires true;\n//@ ensures \\result == (b1 || b2);\n```",
    "DisjunctionIncorrect.disjunctOf": "```java\n//@ requires true;\n//@ ensures \\result == (b1 || b2);\n```",
    "DistinctArray.isDistinct": "```\n//@ requires arr != null;\n//@ ensures \\result <==> (\\forall int i; 0 <= i && i < arr.length; (\\forall int j; 0 <= j && j < arr.length; i == j || arr[i] != arr[j]));\n```",
    "DistinctArrayIncorrect.isDistinct": "```java\n//@ requires arr != null;\n//@ ensures \\result <==> (\\forall int i; 0 <= i && i < arr.length; (\\forall int j; 0 <= j && j < arr.length; i == j || arr[i] != arr[j]));\n```",
    "IsAscending.isAscending": "```java\n//@ requires arr != null;\n//@ ensures (arr.length < 2) ==> \\result == true;\n//@ ensures (arr.length >= 2) ==> \\result == (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i + 1]);\n```",
    "IsAscendingIncorrect.isAscending": "```java\n//@ requires arr != null;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i + 1]);\n```",
    "IsCommonFactor.isCommonFactor": "```\n//@ requires factor >= 1;\n//@ ensures \\result == (a % factor == 0 && b % factor == 0);\n//@ signals (IllegalArgumentException e) factor < 1;\n```",
    "IsCommonFactorIncorrect.isCommonFactor": "```java\n//@ requires factor >= 1;\n//@ ensures \\result == (a % factor == 0 && b % factor == 0);\n//@ signals (IllegalArgumentException e) factor < 1;\n```",
    "XOR.xor": "```java\n//@ requires true;\n//@ ensures \\result == (b1 && !b2) || (!b1 && b2);\n```",
    "XORIncorrect.xor": "```java\n//@ requires true;\n//@ ensures \\result == (b1 && !b2) || (!b1 && b2);\n```",
    "ComputeArea.computeArea": "```java\n//@ requires true;\n//@ ensures \\result == (ax1 > ax2 ? ax1 - ax2 : ax2 - ax1) * (ay1 > ay2 ? ay1 - ay2 : ay2 - ay1);\n```",
    "ComputeAreaIncorrect.computeArea": "```java\n//@ requires true;\n//@ ensures \\result == ((ax2 >= ax1 ? ax2 - ax1 : ax1 - ax2) * (ay2 >= ay1 ? ay2 - ay1 : ay1 - ay2));\n```",
    "CreditCard.charge": "```\n//@ requires amount >= 0;\n//@ ensures balance == \\old(balance) + amount;\n```",
    "CreditCardIncorrect.charge": "```java\n//@requires amount >= 0;\n//@ensures balance == \\old(balance) + amount;\n```",
    "DigitRoot.digitRoot": "```java\n//@ requires number >= 0;\n//@ ensures \\result >= 0 && \\result <= 9;\n//@ signals (IllegalArgumentException e) number < 0;\n```",
    "GenerateString.generateString": "```jml\n//@requires length >= 0;\n//@ensures \\result.length() == length;\n//@ensures (\\forall int i; 0 <= i && i < length; 'a' <= \\result.charAt(i) && \\result.charAt(i) <= 'z');\n//@ensures (\\forall int i; 0 <= i && i < length; \\result.charAt(i) == ('a' + (i % 26)));\n```",
    "GenerateStringIncorrectLength.generateString": "```\n//@ requires length >= 0;\n//@ ensures \\result.length() == length;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length(); \\result.charAt(i) >= 'a' && \\result.charAt(i) <= 'z');\n```",
    "SetZero.setZero": "```java\n//@ requires a != null;\n//@ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n//@ ensures \\result.length == a.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \n//@          (iBegin <= i && i <= iEnd) ? \\result[i] == 0 : \\result[i] == a[i]);\n```",
    "SetZeroIncorrectLength.setZero": "```java\n//@ requires a != null;\n//@ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n//@ ensures \\result.length == a.length;\n//@ ensures (\\forall int i; 0 <= i && i < iBegin; \\result[i] == a[i]);\n//@ ensures (\\forall int i; iBegin <= i && i <= iEnd; \\result[i] == 0);\n//@ ensures (\\forall int i; iEnd < i && i < a.length; \\result[i] == a[i]);\n```",
    "StringLength.length": "```java\n//@ requires s != null;\n//@ ensures \\result == s.length();\n```",
    "StringLengthIncorrect.length": "```java\n//@ requires s != null;\n//@ ensures \\result == s.length();\n```",
    "Temperatures.convertTemperature": "```\n//@ requires celsius >= -273;\n//@ ensures \\result != null && \\result.length == 3;\n//@ ensures \\result[0] == celsius;\n//@ ensures \\result[1] == celsius + 273.15;\n//@ ensures \\result[2] == celsius * 9 / 5 + 32;\n//@ signals (IllegalArgumentException e) celsius < -273;\n```",
    "TemperaturesIncorrect.convertTemperature": "```java\n//@ requires true;\n//@ ensures \\result.length == 3;\n//@ ensures \\result[0] == celsius;\n//@ ensures \\result[1] == celsius + 273.15;\n//@ ensures \\result[2] == celsius * 9.0 / 5.0 + 32.0;\n```",
    "ExceptionTest.test": "```java\n//@ requires true;\n//@ ensures \\result == a;\n//@ signals (IllegalArgumentException e) a > 10;\n```",
    "ExceptionTestIncorrect.test": "```java\n//@ requires true;\n//@ ensures \\result == a;\n//@ signals (IllegalArgumentException) a > 10;\n```",
    "BubbleSort.bubbleSort": "```java\n//@ requires arr != null;\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] <= \\result[i + 1]);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < \\result.length; arr[i] == \\result[j]));\n```",
    "BubbleSortDesc.bubbleSort": "```java\n//@ requires arr != null;\n//@ ensures \\result != arr;\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] >= \\result[i + 1]);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < \\result.length; arr[i] == \\result[j]));\n```",
    "BubbleSortIncorrect.bubbleSort": "```\n//@ requires arr != null;\n//@ ensures \\result != arr;\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] <= \\result[i + 1]);\n//@ ensures (\\forall int x; 0 <= x && x < arr.length; (\\exists int y; 0 <= y && y < \\result.length; arr[x] == \\result[y]));\n//@ ensures (\\forall int y; 0 <= y && y < \\result.length; (\\exists int x; 0 <= x && x < arr.length; \\result[y] == arr[x]));\n```",
    "ContainsDuplicate.containsDuplicate": "```\n//@ requires nums != null;\n//@ ensures \\result == (\\exists int i, j; 0 <= i && i < j && j < nums.length; nums[i] == nums[j]);\n```",
    "ContainsDuplicateIncorrect.containsDuplicate": "```java\n//@ requires nums != null;\n//@ ensures \\result == (\\exists int i, j; 0 <= i && i < nums.length && 0 <= j && j < nums.length && i != j; nums[i] == nums[j]);\n```",
    "FindFirstZero.findFirstZero": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == (\\min int i; 0 <= i && i < arr.length && arr[i] == 0; i);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] != 0) ==> \\result == -1;\n```",
    "FindFirstZeroIncorrect.findFirstZero": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == (\\min int i; 0 <= i && i < arr.length && arr[i] == 0; i);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == -1;\n```",
    "IndexOf.find": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == \n//           (\\min int j; 0 <= j && j < arr.length && arr[j] == target; j);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == -1;\n```",
    "IndexOfIncorrect.find": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == (\\min int j; 0 <= j && j < arr.length && arr[j] == target; j);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == -1;\n```",
    "Biggest.biggest": "```java\n//@ requires a != null;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result >= a[i]) && (a.length > 0 ==> (\\exists int j; 0 <= j && j < a.length; \\result == a[j])) && (a.length == 0 ==> \\result == -1);\n```",
    "BiggestFirstIncorrect.biggest": "```java\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (0 <= \\result && \\result < a.length && (\\forall int i; 0 <= i && i < a.length; a[\\result] >= a[i]));\n```",
    "BiggestIncorrect.biggest": "```java\n//@ requires a != null;\n//@ ensures (\\result == -1 && a.length == 0) || (0 <= \\result && \\result < a.length && (\\forall int i; 0 <= i && i < a.length; a[i] <= a[\\result]));\n```",
    "BiggestIndex.biggest": "```\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (0 <= \\result && \\result < a.length);\n//@ ensures a.length > 0 ==> (\\forall int i; 0 <= i && i < a.length; a[\\result] >= a[i]);\n```",
    "BubbleSort.swap": "Sure, please provide the JavaDoc comment for the method you would like the JML specification for.",
    "BubbleSortDesc.swap": "It seems like the JavaDoc comment did not come through. Could you please provide it again?",
    "BubbleSortIncorrect.swap": "It looks like there might be an issue with the input. Could you try providing the JavaDoc comment one more time?",
    "IsDescendingIncorrect.isDescending": "```\n//@ requires arr != null;\n//@ ensures \\result == (arr.length < 2) || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] > arr[i + 1]);\n```",
    "IsDescending.isDescending": "```java\n//@ requires arr != null;\n//@ ensures \\result == (arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] > arr[i + 1]));\n```",
    "SmallestIncorrect.smallest": "```java\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (\\exists int j; 0 <= j && j < a.length; a[j] == \\result && (\\forall int i; 0 <= i && i < a.length; a[i] >= \\result));\n```",
    "AbsIncorrect.abs": "```\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "Smallest.smallest": "```\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (\\exists int minIndex; 0 <= minIndex && minIndex < a.length; \n//@                          (\\forall int j; 0 <= j && j < a.length; a[minIndex] <= a[j]) && \\result == a[minIndex]);\n```",
    "AbsCorrect.abs": "```\n//@requires true;\n//@ensures \\result == (a >= 0 ? a : -a);\n```",
    "LastIndexOfIncorrect.lastIndexOf": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> \\result == (\\max int j; 0 <= j && j < arr.length && arr[j] == element; j);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] != element) ==> \\result == -1;\n```",
    "LastIndexOf.lastIndexOf": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==>\n//@          \\result == (\\max int i; 0 <= i && i < arr.length && arr[i] == element; i);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> \\result == -1;\n```",
    "FibonacciIncorrect.calculateFibonacci": "```java\n//@ requires 0 <= n && n <= 20;\n//@ ensures \\result == (\\sum int i; 0 <= i && i < n; (\\sum int j; 0 <= j && j <= i; (j==0 ? 1 : (j==1 ? 1 : \\sum int k; 2 <= k && k <= j; \\result[k-1] + \\result[k-2]))));\n//@ signals (IllegalArgumentException e) n > 20;\n```",
    "DivideIncorrect.divide": "```jml\n//@ requires b != 0;\n//@ ensures \\result == a / b;\n//@ signals (IllegalArgumentException e) b == 0;\n```",
    "Divide.divide": "```java\n//@ requires b != 0;\n//@ ensures \\result == a / b;\n//@ signals (IllegalArgumentException e) b == 0;\n```",
    "Fibonacci.calculateFibonacci": "```\n//@ requires 0 <= n && n <= 20;\n//@ ensures \\result == (\\sum int i; 0 <= i && i < n; nthFibonacci(i));\n//@ signals (IllegalArgumentException e) n > 20;\n```",
    "ParseBoolean.parse": "```java\n//@ requires inputString != null;\n//@ requires inputString.length() == 4 || inputString.length() == 5;\n//@ requires (\\forall int i; 0 <= i && i < inputString.length();\n//@             (inputString.length() == 4 ==> \n//@                 ((inputString.charAt(i) == 't' || inputString.charAt(i) == 'T') || \n//@                  (inputString.charAt(i) == 'r' || inputString.charAt(i) == 'R') || \n//@                  (inputString.charAt(i) == 'u' || inputString.charAt(i) == 'U') || \n//@                  (inputString.charAt(i) == 'e' || inputString.charAt(i) == 'E'))) &&\n//@             (inputString.length() == 5 ==> \n//@                 ((inputString.charAt(i) == 'f' || inputString.charAt(i) == 'F') || \n//@                  (inputString.charAt(i) == 'a' || inputString.charAt(i) == 'A') || \n//@                  (inputString.charAt(i) == 'l' || inputString.charAt(i) == 'L') || \n//@                  (inputString.charAt(i) == 's' || inputString.charAt(i) == 'S') || \n//@                  (inputString.charAt(i) == 'e' || inputString.charAt(i) == 'E'))));\n//@ ensures (\\result == true && \n//@             ((inputString.length() == 4 &&\n//@               (inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') &&\n//@               (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') &&\n//@               (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') &&\n//@               (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E')))) || \n//@          (\\result == false && \n//@             ((inputString.length() == 5 &&\n//@               (inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') &&\n//@               (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') &&\n//@               (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') &&\n//@               (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') &&\n//@               (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E'))));\n//@ signals (IllegalArgumentException e) inputString == null || \n//@          ((inputString.length() != 4 ||\n//@           !( (inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') &&\n//@              (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') &&\n//@              (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') &&\n//@              (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E') )) &&\n//@           (inputString.length() != 5 ||\n//@           !( (inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') &&\n//@              (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') &&\n//@              (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') &&\n//@              (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') &&\n//@              (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E') )));\n```",
    "ParseBooleanIncorrect.parse": "```\n//@ requires inputString != null;\n//@ requires (inputString.length() == 4 || inputString.length() == 5);\n//@ ensures (\\result == true) <==> ((inputString.length() == 4) &&\n//@                                 ((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') &&\n//@                                  (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') &&\n//@                                  (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') &&\n//@                                  (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E')));\n//@ ensures (\\result == false) <==> ((inputString.length() == 5) &&\n//@                                  ((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') &&\n//@                                   (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') &&\n//@                                   (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') &&\n//@                                   (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') &&\n//@                                   (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E')));\n//@ signals (IllegalArgumentException e) (!(inputString != null && \n//@                                         ((inputString.length() == 4 && \n//@                                           (inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') && \n//@                                           (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') && \n//@                                           (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') && \n//@                                           (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E')) || \n//@                                          (inputString.length() == 5 && \n//@                                           (inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') && \n//@                                           (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') && \n//@                                           (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') && \n//@                                           (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') && \n//@                                           (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E')))));\n```",
    "CopyOfRangeIncorrect.copyOfRange": "```java\n//@ requires original != null;\n//@ requires 0 <= from && from <= original.length;\n//@ requires from <= to;\n//@ ensures \\result.length == to - from;\n//@ ensures (\\forall int i; 0 <= i && i < to - from;\n//@            (from + i < original.length ? \\result[i] == original[from + i] : \\result[i] == 0));\n//@ signals (ArrayIndexOutOfBoundsException e) from < 0 || from > original.length;\n//@ signals (IllegalArgumentException e) from > to;\n```",
    "CopyOfRange.copyOfRange": "```java\n//@ requires original != null;\n//@ requires 0 <= from;\n//@ requires from <= original.length;\n//@ requires from <= to;\n//@ ensures \\result.length == to - from;\n//@ ensures (\\forall int i; 0 <= i && i < (to - from) && from + i < original.length; \\result[i] == original[from + i]);\n//@ ensures (\\forall int i; 0 <= i && i < (to - from) && from + i >= original.length; \\result[i] == 0);\n//@ signals (ArrayIndexOutOfBoundsException e) from < 0 || from > original.length;\n//@ signals (IllegalArgumentException e) from > to;\n```",
    "RandomInt.randomInt": "```\n//@ requires min <= max;\n//@ ensures \\result >= min && \\result <= max;\n//@ signals (IllegalArgumentException e) min > max;\n```",
    "RandomIntIncorrect.randomInt": "```jml\n//@ requires min <= max;\n//@ ensures \\result >= min && \\result <= max;\n//@ signals (IllegalArgumentException e) min > max;\n```",
    "RemoveElementsIncorrect.removeElement": "```java\n//@ requires arr != null;\n//@ ensures \\result != null;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \\result[i] != b);\n//@ ensures (\\forall int j; 0 <= j && j < \\result.length; (\\exists int k; 0 <= k && k < arr.length; \\result[j] == arr[k] && arr[k] != b));\n//@ ensures \\result.length == (\\sum int i; 0 <= i && i < arr.length; (arr[i] != b ? 1 : 0));\n```",
    "RemoveElements.removeElement": "```java\n//@ requires arr != null;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \\result[i] != b);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] != b ==> (\\exists int j; 0 <= j && j < \\result.length; \\result[j] == arr[i]));\n//@ ensures \\result.length <= arr.length;\n```",
    "CombineArrayIncorrect.combine": "```java\n//@ requires a != null && b != null;\n//@ ensures \\result.length == a.length + b.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i]);\n//@ ensures (\\forall int j; 0 <= j && j < b.length; \\result[a.length + j] == b[j]);\n```",
    "CombineArray.combine": "```java\n//@ requires a != null && b != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length == a.length + b.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i]);\n//@ ensures (\\forall int i; 0 <= i && i < b.length; \\result[a.length + i] == b[i]);\n```",
    "ReverseArrayIncorrect.reverse": "```java\n//@ requires a != null;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[a.length - i - 1]);\n```",
    "ReverseArray.reverse": "```\n//@ requires a != null;\n//@ ensures \\result != null && \\result.length == a.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[a.length - i - 1]);\n```",
    "StringIndexOfIncorrect.indexOf": "```\n//@ requires s != null;\n//@ ensures \\result == -1 <==> (\\forall int i; 0 <= i && i < s.length(); s.charAt(i) != sub);\n//@ ensures \\result != -1 ==> (0 <= \\result && \\result < s.length() && s.charAt(\\result) == sub && (\\forall int j; 0 <= j && j < \\result; s.charAt(j) != sub));\n```",
    "StringIndexOf.indexOf": "```java\n//@ requires s != null;\n//@ ensures (\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result == (\\min int i; 0 <= i && i < s.length() && s.charAt(i) == sub; i);\n//@ ensures (\\forall int i; 0 <= i && i < s.length(); s.charAt(i) != sub) ==> \\result == -1;\n```",
    "SplitString.split": "```java\n//@ requires s != null;\n//@ requires 0 <= index && index <= s.length();\n//@ ensures \\result != null && \\result.length == 2;\n//@ ensures \\result[0].equals(s.substring(0, index));\n//@ ensures \\result[1].equals(s.substring(index, s.length()));\n```",
    "SplitStringIncorrect.split": "```java\n//@ requires s != null;\n//@ requires 0 <= index && index <= s.length();\n//@ ensures \\result != null;\n//@ ensures \\result.length == 2;\n//@ ensures \\result[0].equals(s.substring(0, index));\n//@ ensures \\result[1].equals(s.substring(index, s.length()));\n```",
    "StringConcat.concat": "```java\n//@ requires a != null && b != null;\n//@ ensures \\result.equals(a.concat(b));\n```",
    "StringConcatIncorrect.concat": "```\n//@ requires a != null && b != null;\n//@ ensures \\result.equals(a + b);\n```",
    "PrimeCheck.isPrime": "```\n//@ requires n > 1;\n//@ ensures \\result <==> (\\forall int i; 2 <= i && i * i <= n; n % i != 0);\n```",
    "PrimeCheckIncorrect.isPrime": "```\n//@ requires n > 1;\n//@ ensures \\result <==> (\\forall int i; 2 <= i && i <= n / 2; n % i != 0);\n```",
    "PrimeNumberGenerator.generatePrimes": "```java\n//@ requires 0 <= n && n <= 20;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; (\\forall int j; 2 <= j && j < \\result[i]; \\result[i] % j != 0) && \\result[i] <= n);\n//@ ensures (\\forall int k; 2 <= k && k <= n; (\\forall int m; 0 <= m && m < \\result.length; \\result[m] != k) ==> (\\exists int l; 2 <= l && l < k; k % l == 0));\n//@ signals (IllegalArgumentException e) n < 0 || n > 20;\n```",
    "PrimeNumberGeneratorIncorrect.generatePrimes": "```java\n//@ requires 0 <= n && n <= 20;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \n//@          (\\forall int j; 2 <= j && j < \\result[i]; \\result[i] % j != 0) && \\result[i] > 1);\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] < \\result[i+1]);\n//@ signals (IllegalArgumentException e) n > 20 || n < 0;\n```",
    "LeapYear.isLeapYear": "```java\n//@ requires true;\n//@ ensures \\result == ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n```",
    "LeapYearIncorrect.isLeapYear": "```java\n//@ requires true;\n//@ ensures \\result <==> (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n```",
    "Withdraw.withdraw": "```\n//@ requires amount >= 0;\n//@ requires balance >= 0;\n//@ requires amount <= balance;\n//@ ensures \\result == balance - amount;\n//@ signals (IllegalArgumentException e) amount < 0 || balance < 0 || amount > balance || balance - amount < 0;\n```",
    "WithdrawIncorrect.withdraw": "```java\n//@ requires balance >= 0;\n//@ requires amount >= 0;\n//@ requires amount <= balance;\n//@ ensures \\result == balance - amount;\n//@ signals (IllegalArgumentException e) amount < 0 || amount > balance || balance < 0 || (balance - amount) < 0;\n```",
    "Dart.calculateScore": "```\n//@ requires 1 <= number && number <= 20;\n//@ requires 1 <= region && region <= 3;\n//@ requires 0 <= currentScore <= 501;\n//@ ensures (\\result == currentScore - (number * region)) && \\result >= 0 || \\result == currentScore;\n//@ signals (IllegalArgumentException e) number < 1 || number > 20 || region < 1 || region > 3;\n```",
    "DartIncorrect.calculateScore": "```java\n//@ requires 1 <= number && number <= 20;\n//@ requires 1 <= region && region <= 3;\n//@ requires currentScore >= 0;\n//@ ensures (currentScore - (number * region) >= 0) ==> \\result == currentScore - (number * region);\n//@ ensures (currentScore - (number * region) < 0) ==> \\result == currentScore;\n//@ signals (IllegalArgumentException e) false;\n```",
    "AddWithMax.addWithMax": "```java\n//@ requires true;\n//@ ensures \\result == a + b;\n//@ signals_only IllegalArgumentException;\n//@ signals (IllegalArgumentException e) a + b > 2000;\n```",
    "PowIncorrect.pow": "```\n//@ requires a >= 0 && b >= 0;\n//@ requires a <= 10 && b <= 10;\n//@ ensures b == 0 ==> \\result == 1;\n//@ ensures b != 0 ==> (\\result == (\\product int i; 0 <= i && i < b; a));\n```",
    "AddWithMaxIncorrect.addWithMax": "```java\n//@ requires true;\n//@ ensures \\result == a + b;\n//@ signals (IllegalArgumentException e) a + b > 2000;\n```",
    "Pow.pow": "```java\n//@ requires a >= 0 && b >= 0;\n//@ requires a <= 10 && b <= 10;\n//@ ensures b == 0 ==> \\result == 1;\n//@ ensures b != 0 ==> \\result == (\\product int i; 0 <= i && i < b; a);\n//@ signals (IllegalArgumentException e) a < 0 || b < 0;\n//@ signals (IllegalArgumentException e) a > 10 || b > 10;\n```",
    "Factorial.factorial": "```java\n//@ requires n >= 0 && n <= 10;\n//@ ensures \\result == (\\product int i; 1 <= i && i <= n; i);\n//@ signals (IllegalArgumentException e) n < 0 || n > 10;\n```",
    "FactorialIncorrect.factorial": "```java\n//@ requires n >= 0 && n <= 10;\n//@ ensures \\result == (\\product int i; 1 <= i && i <= n; i);\n//@ signals (IllegalArgumentException e) n < 0 || n > 10;\n```",
    "ReverseStringIncorrect.reverse": "```java\n//@ requires s != null;\n//@ ensures \\result != null && \\result.length() == s.length() &&\n//@          (\\forall int i; 0 <= i && i < s.length(); \\result.charAt(i) == s.charAt(s.length() - 1 - i));\n```",
    "ReverseString.reverse": "```java\n//@ requires s != null;\n//@ ensures \\result != null && \\result.length() == s.length() && \n//@         (\\forall int i; 0 <= i && i < s.length(); \\result.charAt(i) == s.charAt(s.length() - 1 - i));\n```",
    "PalindromIncorrect.isPalindrom": "```\n//@ requires s != null;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < s.length() / 2; s.charAt(i) == s.charAt(s.length() - 1 - i));\n```",
    "Palindrom.isPalindrom": "```java\n//@ requires s != null;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < s.length() / 2; s.charAt(i) == s.charAt(s.length() - i - 1));\n```",
    "SubstringIncorrect.substring": "```\n//@ requires s != null;\n//@ requires 0 <= start && start <= end && end <= s.length();\n//@ ensures \\result != null;\n//@ ensures \\result.length() == end - start;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length(); \\result.charAt(i) == s.charAt(start + i));\n//@ signals (IndexOutOfBoundsException e) start < 0 || end > s.length();\n//@ signals (IllegalArgumentException e) start > end;\n```",
    "Substring.substring": "```java\n//@ requires s != null;\n//@ requires 0 <= start && start <= end && end <= s.length();\n//@ ensures \\result != null;\n//@ ensures \\result.length() == end - start;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length(); \\result.charAt(i) == s.charAt(start + i));\n//@ signals (IndexOutOfBoundsException e) start < 0 || end > s.length();\n//@ signals (IllegalArgumentException e) start > end;\n```",
    "CompareInt.compareInt": "```jml\n//@ requires true;\n//@ ensures (\\result == 0 && a == b) || (\\result > 0 && a > b) || (\\result < 0 && a < b);\n```",
    "CompareIntIncorrect.compareInt": "```java\n//@ requires true;\n//@ ensures \\result == 0 <==> a == b;\n//@ ensures \\result > 0 <==> a > b;\n//@ ensures \\result < 0 <==> a < b;\n```"
}