{
    "Abs.abs": "```\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "AbsMinus.abs": "```\n//@requires true;\n//@ensures \\result == (a >= 0 ? a : -a);\n```",
    "AbsSameValue.abs": "```java\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "AddCorrect.add": "```\n//@ requires true;\n//@ ensures \\result == a + b;\n```",
    "AddIncorrect.add": "```java\n//@ requires true;\n//@ ensures \\result == a + b;\n```",
    "IntSquare.squareOf": "```java\n//@ requires true;\n//@ ensures \\result == x * x;\n```",
    "IntSquareIncorrect.squareOf": "```java\n//@ requires true;\n//@ ensures \\result == x * x;\n```",
    "MultiplyCorrect.multiply": "```java\n//@ requires true;\n//@ ensures \\result == a * b;\n```",
    "MultiplyInCorrect.multiply": "```java\n//@requires true;\n//@ensures \\result == a * b;\n```",
    "SubtractCorrect.subtract": "```\n//@ requires true;\n//@ ensures \\result == a - b;\n```",
    "SubtractInvalidOrder.subtract": "```\n//@ requires true;\n//@ ensures \\result == a - b;\n```",
    "CompareArray.compare": "```\n//@ requires a != null && b != null;\n//@ ensures \\result <==> (a.length == b.length && (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]));\n```",
    "CompareArrayIncorrect.compare": "```\n//@ requires a != null && b != null;\n//@ ensures \\result == (a.length == b.length && (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]));\n```",
    "Conjunction.conjunctOf": "```java\n//@ requires true;\n//@ ensures \\result == (b1 && b2);\n```",
    "ConjunctionIncorrect.conjunctOf": "```java\n//@ requires true;\n//@ ensures \\result == (b1 && b2);\n```",
    "Disjunction.disjunctOf": "```java\n//@ requires true;\n//@ ensures \\result == (b1 || b2);\n```",
    "DisjunctionIncorrect.disjunctOf": "```java\n//@ requires true;\n//@ ensures \\result == (b1 || b2);\n```",
    "DistinctArray.isDistinct": "```java\n//@ requires arr != null;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < arr.length; (\\forall int j; 0 <= j && j < arr.length; i == j || arr[i] != arr[j]));\n```",
    "DistinctArrayIncorrect.isDistinct": "```\n//@ requires arr != null;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < arr.length; (\\forall int j; 0 <= j && j < arr.length; i == j || arr[i] != arr[j]));\n```",
    "IsAscending.isAscending": "```\n//@ requires arr != null;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i + 1]) || arr.length < 2;\n```",
    "IsAscendingIncorrect.isAscending": "```java\n//@ requires arr != null;\n//@ ensures \\result == (arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i + 1]));\n```",
    "IsCommonFactor.isCommonFactor": "```java\n//@ requires factor >= 1;\n//@ ensures \\result <==> (a % factor == 0) && (b % factor == 0);\n//@ signals (IllegalArgumentException e) factor < 1;\n```",
    "IsCommonFactorIncorrect.isCommonFactor": "```java\n//@ requires factor >= 1;\n//@ ensures \\result <==> (a % factor == 0 && b % factor == 0);\n//@ signals (IllegalArgumentException) factor < 1;\n```",
    "XOR.xor": "```\n//@ requires true;\n//@ ensures \\result == (b1 && !b2) || (!b1 && b2);\n```",
    "XORIncorrect.xor": "```\n//@ requires true;\n//@ ensures \\result == (b1 && !b2) || (!b1 && b2);\n```",
    "ComputeArea.computeArea": "```\n//@requires true;\n//@ensures \\result == (ax2 > ax1 ? ax2 - ax1 : ax1 - ax2) * (ay2 > ay1 ? ay2 - ay1 : ay1 - ay2);\n```",
    "ComputeAreaIncorrect.computeArea": "```\n//@ requires ax1 <= ax2 && ay1 <= ay2;\n//@ ensures \\result == (ax2 - ax1) * (ay2 - ay1);\n```",
    "CreditCard.charge": "```\n//@ requires amount >= 0;\n//@ ensures balance == \\old(balance) + amount;\n```",
    "CreditCardIncorrect.charge": "```\n//@ requires amount >= 0;\n//@ ensures balance == \\old(balance) + amount;\n```",
    "DigitRoot.digitRoot": "```java\n//@ requires number >= 0;\n//@ ensures \\result >= 0 && \\result < 10 && (number == 0 || number == \\result || (number % 9 == 0 ? \\result == 9 : \\result == number % 9));\n```",
    "GenerateString.generateString": "```java\n//@ requires length >= 0;\n//@ ensures \\result.length() == length;\n//@ ensures (\\forall int i; 0 <= i && i < length; 'a' <= \\result.charAt(i) && \\result.charAt(i) <= 'z');\n```",
    "GenerateStringIncorrectLength.generateString": "```\n//@ requires length >= 0;\n//@ ensures \\result.length() == length;\n//@ ensures (\\forall int i; 0 <= i && i < length; 'a' <= \\result.charAt(i) && \\result.charAt(i) <= 'z');\n```",
    "SetZero.setZero": "```\n//@ requires a != null;\n//@ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n//@ ensures \\forall int i; 0 <= i && i < a.length; \n//@   (\\result[i] == (iBegin <= i && i <= iEnd ? 0 : a[i]));\n```",
    "SetZeroIncorrectLength.setZero": "```java\n//@ requires a != null;\n//@ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n//@ ensures \\result.length == a.length;\n//@ ensures (\\forall int i; 0 <= i && i < iBegin; \\result[i] == a[i]);\n//@ ensures (\\forall int i; iBegin <= i && i <= iEnd; \\result[i] == 0);\n//@ ensures (\\forall int i; iEnd < i && i < a.length; \\result[i] == a[i]);\n```",
    "StringLength.length": "```\n//@ requires s != null;\n//@ ensures \\result == s.length();\n```",
    "StringLengthIncorrect.length": "```java\n//@ requires s != null;\n//@ ensures \\result == s.length();\n```",
    "Temperatures.convertTemperature": "```\n//@ requires true;\n//@ ensures \\result.length == 3;\n//@ ensures \\result[0] == celsius;\n//@ ensures \\result[1] == celsius + 273.15;\n//@ ensures \\result[2] == (celsius * 9.0 / 5.0) + 32.0;\n```",
    "TemperaturesIncorrect.convertTemperature": "```java\n//@ requires true;\n//@ ensures \\result != null && \\result.length == 3;\n//@ ensures \\result[0] == celsius;\n//@ ensures \\result[1] == celsius + 273.15;\n//@ ensures \\result[2] == celsius * 9.0 / 5.0 + 32.0;\n```",
    "ExceptionTest.test": "```java\n//@ requires a <= 10;\n//@ ensures \\result == a;\n//@ signals (IllegalArgumentException) a > 10;\n```",
    "ExceptionTestIncorrect.test": "```\n//@ requires true;\n//@ ensures \\result == a;\n//@ signals (IllegalArgumentException) a > 10;\n```",
    "BubbleSort.bubbleSort": "```\n//@ requires arr != null;\n//@ ensures \\result != arr;\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < arr.length; \\result[i] == arr[j]));\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] <= \\result[i + 1]);\n```",
    "BubbleSortDesc.bubbleSort": "```java\n//@ requires arr != null;\n//@ ensures \\result != arr;\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] >= \\result[i + 1]);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < \\result.length; arr[i] == \\result[j]));\n```",
    "BubbleSortIncorrect.bubbleSort": "```\n//@ requires arr != null;\n//@ ensures \\result != arr;\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; \n//@            (\\exists int j; 0 <= j && j < \\result.length; arr[i] == \\result[j]));\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] <= \\result[i+1]);\n```",
    "ContainsDuplicate.containsDuplicate": "```java\n//@ requires nums != null;\n//@ ensures \\result == (\\exists int i, j; 0 <= i && i < nums.length && 0 <= j && j < nums.length && i != j; nums[i] == nums[j]);\n```",
    "ContainsDuplicateIncorrect.containsDuplicate": "```java\n//@ requires nums != null;\n//@ ensures \\result <==> (\\exists int i, j; 0 <= i && i < nums.length && 0 <= j && j < nums.length && i != j; nums[i] == nums[j]);\n```",
    "FindFirstZero.findFirstZero": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == (\\min int i; 0 <= i && i < arr.length && arr[i] == 0; i);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == -1;\n```",
    "FindFirstZeroIncorrect.findFirstZero": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == (\\min int i; 0 <= i && i < arr.length && arr[i] == 0; i);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == -1;\n```",
    "IndexOf.find": "```\n//@ requires arr != null;\n//@ ensures \\result == -1 <==> (\\forall int i; 0 <= i && i < arr.length; arr[i] != target);\n//@ ensures \\result >= 0 ==> (arr[\\result] == target && (\\forall int j; 0 <= j && j < \\result; arr[j] != target));\n```",
    "IndexOfIncorrect.find": "```\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> (\\result == (\\min int j; 0 <= j && j < arr.length && arr[j] == target; j));\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == -1;\n//@ signals (NullPointerException) arr == null;\n```",
    "Biggest.biggest": "```\n//@ requires a != null;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result >= a[i]) && (a.length > 0 ==> (\\exists int j; 0 <= j && j < a.length; \\result == a[j])) && (a.length == 0 ==> \\result == -1);\n```",
    "BiggestFirstIncorrect.biggest": "```java\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (0 <= \\result && \\result < a.length && (\\forall int i; 0 <= i && i < a.length; a[\\result] >= a[i]));\n```",
    "BiggestIncorrect.biggest": "```\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (0 <= \\result && \\result < a.length && (\\forall int i; 0 <= i && i < a.length; a[\\result] >= a[i]));\n```",
    "BiggestIndex.biggest": "```\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (0 <= \\result && \\result < a.length);\n//@ ensures a.length > 0 ==> (\\forall int i; 0 <= i && i < a.length; a[\\result] >= a[i]);\n```",
    "BubbleSort.swap": "Sure, please provide the JavaDoc comment for the method you would like the JML specification for.",
    "BubbleSortDesc.swap": "It seems like the JavaDoc comment did not come through. Could you please provide it again?",
    "BubbleSortIncorrect.swap": "It looks like there might be an issue with the input. Could you try providing the JavaDoc comment one more time?",
    "IsDescendingIncorrect.isDescending": "```java\n//@ requires arr != null;\n//@ ensures \\result <==> (arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] > arr[i + 1]));\n```",
    "IsDescending.isDescending": "```\n//@ requires arr != null;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] > arr[i + 1]);\n```",
    "SmallestIncorrect.smallest": "```java\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (\\forall int i; 0 <= i && i < a.length; \\result <= a[i]) && (\\exists int i; 0 <= i && i < a.length; \\result == a[i]);\n```",
    "AbsIncorrect.abs": "```java\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "Smallest.smallest": "```\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (\\exists int i; 0 <= i && i < a.length; \\result == a[i]) && (\\forall int i; 0 <= i && i < a.length; \\result <= a[i]);\n```",
    "AbsCorrect.abs": "```\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "LastIndexOfIncorrect.lastIndexOf": "```java\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> (\\result == (\\max int j; 0 <= j && j < arr.length && arr[j] == element; j));\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> (\\result == -1);\n```",
    "LastIndexOf.lastIndexOf": "```java\n//@ requires arr != null;\n//@ ensures \\result == -1 <==> (\\forall int i; 0 <= i && i < arr.length; arr[i] != element);\n//@ ensures \\result != -1 ==> (0 <= \\result && \\result < arr.length && arr[\\result] == element &&\n//@                            (\\forall int j; \\result < j && j < arr.length; arr[j] != element));\n```",
    "FibonacciIncorrect.calculateFibonacci": "```java\n//@ requires 0 <= n && n <= 20;\n//@ ensures \\result == (\\sum int i; 0 <= i && i < n; (\\sum int j; 0 <= j && j <= i; (j==0 ? 1 : (j==1 ? 1 : \\sum int k; 2 <= k && k <= j; \\result[k-1] + \\result[k-2]))));\n//@ signals (IllegalArgumentException e) n > 20;\n```",
    "DivideIncorrect.divide": "```\n//@ requires b != 0;\n//@ ensures \\result == a / b;\n```",
    "Divide.divide": "```java\n//@ requires b != 0;\n//@ ensures \\result == a / b;\n//@ signals (IllegalArgumentException e) b == 0;\n```",
    "Fibonacci.calculateFibonacci": "```\n//@ requires 0 <= n && n <= 20;\n//@ ensures \\result == (\\sum int i; 0 <= i && i < n; nthFibonacci(i));\n//@ signals (IllegalArgumentException e) n > 20;\n```",
    "ParseBoolean.parse": "```java\n//@ requires inputString != null;\n//@ requires inputString.length() == 4 || inputString.length() == 5;\n//@ requires (\\forall int i; 0 <= i && i < inputString.length(); \n//@              (inputString.length() == 4 ==> \n//@                 ((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') &&\n//@                  (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') &&\n//@                  (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') &&\n//@                  (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E')))\n//@              || \n//@              (inputString.length() == 5 ==> \n//@                 ((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') &&\n//@                  (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') &&\n//@                  (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') &&\n//@                  (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') &&\n//@                  (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E'))));\n//@ ensures (inputString.length() == 4 ==> \\result == true) && \n//@         (inputString.length() == 5 ==> \\result == false);\n//@ signals_only IllegalArgumentException;\n//@ signals (IllegalArgumentException e) inputString == null || \n//@         (!(inputString.length() == 4 || inputString.length() == 5) || \n//@         ((inputString.length() == 4 ==> \n//@              !((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') &&\n//@                (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') &&\n//@                (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') &&\n//@                (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'))))\n//@          && \n//@         (inputString.length() == 5 ==> \n//@              !((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') &&\n//@                (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') &&\n//@                (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') &&\n//@                (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') &&\n//@                (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E'))));\n```",
    "ParseBooleanIncorrect.parse": "```java\n//@ requires inputString != null;\n//@ requires (\\forall int i; 0 <= i && i < inputString.length(); \n//       ('A' <= inputString.charAt(i) && inputString.charAt(i) <= 'Z' || \n//        'a' <= inputString.charAt(i) && inputString.charAt(i) <= 'z'));\n//@ requires (inputString.length() == 4 && \n//            ((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') && \n//             (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') && \n//             (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') && \n//             (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E')))\n//@          || \n//            (inputString.length() == 5 && \n//             ((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') && \n//              (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') && \n//              (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') && \n//              (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') && \n//              (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E'))));\n//@ ensures (\\result == true <==> (inputString.length() == 4 && \n//            (inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') && \n//            (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') && \n//            (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') && \n//            (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E')));\n//@ ensures (\\result == false <==> (inputString.length() == 5 && \n//            (inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') && \n//            (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') && \n//            (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') && \n//            (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') && \n//            (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E')));\n```"
}