{
    "DistinctArrayIncorrect.isDistinct": "// requires arr != null\n// ensures \\result == (\\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] != arr[j])",
    "LastIndexOfIncorrect.lastIndexOf": "// @ public normal_behavior\n// @ requires arr != null;\n// @ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==>\n             \\result == (\\max int i; 0 <= i && i < arr.length && arr[i] == element; i);\n// @ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==>\n             \\result == -1;",
    "SetZero.setZero": "// @ public normal_behavior\n// @ requires a != null;\n// @ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n// @ ensures \\result != a;\n// @ ensures \\result.length == a.length;\n// @ ensures (\\forall int i; 0 <= i && i < a.length && (i < iBegin || i > iEnd); \\result[i] == a[i]);\n// @ ensures (\\forall int i; iBegin <= i && i <= iEnd; \\result[i] == 0);",
    "IsAscending.isAscending": "//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures \\result == (arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i + 1]));",
    "IndexOfIncorrect.find": "// @ public normal_behavior\n// @ requires arr != null;\n// @ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \n// @          (0 <= \\result && \\result < arr.length \n// @           && arr[\\result] == target \n// @           && (\\forall int j; 0 <= j && j < \\result; arr[j] != target));\n// @ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] != target) ==> \\result == -1;",
    "IsAscendingIncorrect.isAscending": "//@ requires arr != null;\n//@ ensures (\\forall int i; 0 <= i && i + 1 < arr.length; arr[i+1] > arr[i]);",
    "IsDescending.isDescending": "//@ requires arr != null;\n//@ ensures \\result <==> (arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i+1] < arr[i]));",
    "IsDescendingIncorrect.isDescending": "// @ requires arr != null;\n// @ ensures \\result == (arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i+1] < arr[i]));",
    "ReverseArrayIncorrect.reverse": "//@ requires a != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length == a.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[a.length - 1 - i]);",
    "RemoveElementsIncorrect.removeElement": "// @requires arr != null;\n// @ensures \\result != null;\n// @ensures \\result.length == (\\sum int i; 0 <= i && i < arr.length && arr[i] != b; 1);\n// @ensures (\\forall int j; 0 <= j && j < \\result.length; \\result[j] != b);\n// @ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] == b || (\\exists int j; 0 <= j && j < \\result.length; \\result[j] == arr[i]));",
    "ReverseArray.reverse": "// requires a != null\n// ensures \\result != null\n// ensures \\result.length == a.length\n// ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[a.length - 1 - i])",
    "RemoveElements.removeElement": "//@ requires arr != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length == (\\sum int i; 0 <= i && i < arr.length && arr[i] != b; 1);\n//@ ensures (\\forall int j; 0 <= j && j < arr.length && arr[j] != b; (\\exists int k; 0 <= k && k < \\result.length; \\result[k] == arr[j]));\n//@ ensures (\\forall int k; 0 <= k && k < \\result.length; \\result[k] != b);\n//@ ensures (\\forall int j1, j2; 0 <= j1 && j1 < j2 && j2 < arr.length && arr[j1] != b && arr[j2] != b; (\\min int k1; 0 <= k1 && k1 < \\result.length && \\result[k1] == arr[j1]; k1) < (\\min int k2; 0 <= k2 && k2 < \\result.length && \\result[k2] == arr[j2]; k2));",
    "SetZeroIncorrectLength.setZero": "// @ public normal_behavior\n// @ requires a != null;\n// @ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n// @ ensures \\result != a;\n// @ ensures \\result.length == a.length;\n// @ ensures (\\forall int k; 0 <= k && k < a.length; (k < iBegin || k > iEnd) ==> \\result[k] == a[k]);\n// @ ensures (\\forall int k; iBegin <= k && k <= iEnd; \\result[k] == 0);",
    "ContainsDuplicateIncorrect.containsDuplicate": "// public normal_behavior\n// requires nums != null;\n// ensures \\result == (\\exists int i,j; 0 <= i && i < j && j < nums.length; nums[i] == nums[j]);",
    "ContainsDuplicate.containsDuplicate": "// @ public normal_behavior\n// @ requires nums != null;\n// @ ensures \\result == (\\exists int i; 0 <= i && i < nums.length; (\\exists int j; 0 <= j && j < nums.length; i != j && nums[i] == nums[j]));",
    "LastIndexOf.lastIndexOf": "// @ public normal_behavior\n// @ requires arr != null;\n// @ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==>\n             (0 <= \\result && \\result < arr.length &&\n              arr[\\result] == element &&\n              (\\forall int j; \\result < j && j < arr.length; arr[j] != element));\n// @ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> \\result == -1;",
    "CompareArrayIncorrect.compare": "// @ public normal_behavior\n// @ requires a != null;\n// @ requires b != null;\n// @ ensures \\result <==> (a.length == b.length && (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]));",
    "DistinctArray.isDistinct": "//@ requires arr != null;\n//@ ensures \\result <==> (\\forall int i,j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j; arr[i] != arr[j]);",
    "FindFirstZeroIncorrect.findFirstZero": "// @ public normal_behavior\n// @ requires arr != null;\n// @ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==>\n             (0 <= \\result && \\result < arr.length\n              && arr[\\result] == 0\n              && (\\forall int j; 0 <= j && j < \\result; arr[j] != 0));\n// @ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == -1;",
    "FindFirstZero.findFirstZero": "//@ public normal_behavior\n//@ requires arr != null\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> (0 <= \\result && \\result < arr.length && arr[\\result] == 0 && (\\forall int j; 0 <= j && j < \\result; arr[j] != 0))\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] != 0) ==> \\result == -1",
    "Smallest.smallest": "// public normal_behavior\n// requires a != null;\n// ensures a.length == 0 ==> \\result == -1;\n// ensures a.length > 0 ==> \\result == (\\min int i; 0 <= i && i < a.length; a[i]);",
    "BubbleSort.bubbleSort": "// @ public normal_behavior\n// @ requires arr != null;\n// @ ensures \\result != null;\n// @ ensures \\result.length == arr.length;\n// @ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] <= \\result[i + 1]);\n// @ ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < \\result.length; \\result[j] == arr[i]));\n// @ ensures (\\forall int j; 0 <= j && j < \\result.length; (\\exists int i; 0 <= i && i < arr.length; \\result[j] == arr[i]));",
    "BiggestIncorrect.biggest": "//@ public normal_behavior\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> 0 <= \\result && \\result < a.length;\n//@ ensures a.length > 0 ==> (\\forall int i; 0 <= i && i < a.length; a[\\result] >= a[i]);",
    "CombineArrayIncorrect.combine": "//@ public normal_behavior\n//@ requires a != null;\n//@ requires b != null;\n//@ ensures \\result != a;\n//@ ensures \\result != b;\n//@ ensures \\result.length == a.length + b.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i]);\n//@ ensures (\\forall int j; 0 <= j && j < b.length; \\result[a.length + j] == b[j]);",
    "Biggest.biggest": "// requires a != null;\n// ensures \\result == (a.length == 0 ? -1 : (\\max int i; 0 <= i && i < a.length; a[i]));",
    "AddCorrect.add": "// public normal_behavior\n// ensures \\result == a + b",
    "IsCommonFactorIncorrect.isCommonFactor": "//@ public normal_behavior\n//@ requires factor >= 1\n//@ ensures \\result == (a % factor == 0 && b % factor == 0)\n//@also public exceptional_behavior\n//@ requires factor < 1\n//@ signals (IllegalArgumentException e) factor < 1",
    "SmallestIncorrect.smallest": "// public normal_behavior\n// requires a != null;\n// ensures a.length == 0 ==> \\result == -1;\n// ensures a.length > 0 ==> (\\exists int i; 0 <= i && i < a.length; a[i] == \\result) \n//                        && (\\forall int j; 0 <= j && j < a.length; \\result <= a[j]);",
    "AddIncorrect.add": "//@ public normal_behavior\n//@ ensures \\result == a + b",
    "IsCommonFactor.isCommonFactor": "// public normal_behavior\n// requires factor >= 1;\n// ensures \\result == ((a % factor == 0) && (b % factor == 0));\n// also public exceptional_behavior\n// requires factor < 1;\n// signals (IllegalArgumentException e) factor < 1;",
    "IndexOf.find": "// @ public normal_behavior\n// @ requires arr != null;\n// @ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==>\n             (0 <= \\result && \\result < arr.length &&\n              arr[\\result] == target &&\n              (\\forall int k; 0 <= k && k < \\result; arr[k] != target));\n// @ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] != target) ==> \\result == -1;",
    "AddWithMax.addWithMax": "//@ public normal_behavior\n//@ requires a + b <= 2000;\n//@ ensures \\result == a + b;\n//@ also\n//@ public exceptional_behavior\n//@ requires a + b > 2000;\n//@ signals (IllegalArgumentException e) a + b > 2000;",
    "AddWithMaxIncorrect.addWithMax": "// public normal_behavior\n// requires a + b <= 2000\n// ensures \\result == a + b\n// also public exceptional_behavior\n// requires a + b > 2000\n// signals (IllegalArgumentException e) a + b > 2000",
    "DartIncorrect.calculateScore": "//@ public normal_behavior\n//@ requires number >= 1 && number <= 20;\n//@ requires region >= 1 && region <= 3;\n//@ requires currentScore >= 0;\n//@ ensures currentScore - number * region >= 0 ==> \\result == currentScore - number * region;\n//@ ensures currentScore - number * region < 0  ==> \\result == currentScore;\n//@ also public exceptional_behavior\n//@ requires number < 1 || number > 20 || region < 1 || region > 3;\n//@ signals (IllegalArgumentException e) number < 1 || number > 20 || region < 1 || region > 3;",
    "DivideIncorrect.divide": "// @ public normal_behavior\n// @ requires b != 0;\n// @ ensures \\result == a / b;\n// @ also\n// @ public exceptional_behavior\n// @ requires b == 0;\n// @ signals (ArithmeticException e) b == 0;",
    "Dart.calculateScore": "//@ public normal_behavior\n//@ requires 1 <= number && number <= 20;\n//@ requires 1 <= region && region <= 3;\n//@ ensures (currentScore - number * region >= 0) ==> \\result == currentScore - number * region;\n//@ ensures (currentScore - number * region < 0) ==> \\result == currentScore;\n//@ also public exceptional_behavior\n//@ requires number < 1 || number > 20 || region < 1 || region > 3;\n//@ signals (IllegalArgumentException) number < 1 || number > 20 || region < 1 || region > 3;",
    "MultiplyCorrect.multiply": "// public normal_behavior\n// ensures \\result == a * b",
    "MultiplyInCorrect.multiply": "//@ public normal_behavior\n//@ ensures \\result == a * b;",
    "Divide.divide": "// @ public normal_behavior\n// @ requires b != 0\n// @ ensures \\result == a / b\n// @ also public exceptional_behavior\n// @ requires b == 0\n// @ signals (ArithmeticException e) b == 0",
    "CompareArray.compare": "//@ public normal_behavior\n//@ requires a != null\n//@ requires b != null\n//@ ensures \\result <==> (a.length == b.length && (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]))",
    "SubtractCorrect.subtract": "//@ public normal_behavior\n//@ ensures \\result == a - b",
    "SubtractInvalidOrder.subtract": "// @ public normal_behavior\n// @ ensures \\result == a - b;",
    "Conjunction.conjunctOf": "// @ public normal_behavior\n// @ ensures \\result == (b1 && b2);",
    "PowIncorrect.pow": "// @ public normal_behavior\n// @ requires a >= 0 && b >= 0 && a <= 10 && b <= 10;\n// @ ensures \\result == (\\product int i; 0 <= i && i < b; a);\n// @ also\n// @ public exceptional_behavior\n// @ requires a < 0 || b < 0 || a > 10 || b > 10;\n// @ signals (IllegalArgumentException e) a < 0 || b < 0 || a > 10 || b > 10;",
    "ConjunctionIncorrect.conjunctOf": "//@ public normal_behavior\n//@ ensures \\result == (b1 && b2)",
    "Disjunction.disjunctOf": "// @ requires true;\n// @ ensures \\result == (b1 || b2);",
    "CompareIntIncorrect.compareInt": "//@ public normal_behavior\n//@ ensures a == b   ==> \\result == 0;\n//@ ensures a  > b   ==> \\result > 0;\n//@ ensures a  < b   ==> \\result < 0;",
    "DisjunctionIncorrect.disjunctOf": "// @ requires true;\n// @ ensures \\result == (b1 || b2);",
    "XOR.xor": "//@ public normal_behavior\n//@ ensures \\result == (b1 != b2)",
    "XORIncorrect.xor": "//@ public normal_behavior\n//@ ensures \\result == (b1 != b2)",
    "CompareInt.compareInt": "// public normal_behavior\n// ensures (a == b) <==> (\\result == 0);\n// ensures (a  > b) <==> (\\result  > 0);\n// ensures (a  < b) <==> (\\result  < 0);",
    "RandomInt.randomInt": "// @ public normal_behavior\n// @ requires min <= max;\n// @ ensures \\result >= min && \\result <= max;\n// @ also\n// @ public exceptional_behavior\n// @ requires min > max;\n// @ signals (IllegalArgumentException e) min > max;",
    "RandomIntIncorrect.randomInt": "// @ public normal_behavior\n// @ requires min <= max;\n// @ ensures min <= \\result && \\result <= max;\n// @ also public exceptional_behavior\n// @ requires min > max;\n// @ signals (IllegalArgumentException e) min > max;",
    "StringIndexOfIncorrect.indexOf": "// @ public normal_behavior\n// @ requires s != null;\n// @ ensures (\\result >= 0 && \\result < s.length() \n// @          && s.charAt(\\result) == sub \n// @          && (\\forall int i; 0 <= i && i < \\result; s.charAt(i) != sub))\n// @         || (\\result == -1 \n// @          && (\\forall int i; 0 <= i && i < s.length(); s.charAt(i) != sub));",
    "AbsCorrect.abs": "// @ public normal_behavior\n// @ ensures a >= 0  ==> \\result == a\n// @ ensures a < 0   ==> \\result == -a\n// @ ensures \\result >= 0",
    "StringConcatIncorrect.concat": "// @ public normal_behavior\n// @ requires a != null;\n// @ requires b != null;\n// @ ensures \\result != null;\n// @ ensures \\result.length() == a.length() + b.length();\n// @ ensures (\\forall int i; 0 <= i && i < a.length(); \\result.charAt(i) == a.charAt(i));\n// @ ensures (\\forall int j; 0 <= j && j < b.length(); \\result.charAt(a.length() + j) == b.charAt(j));",
    "ComputeAreaIncorrect.computeArea": "//@ public normal_behavior\n//@ requires ax1 <= ax2\n//@ requires ay1 <= ay2\n//@ ensures \\result == (ax2 - ax1) * (ay2 - ay1)",
    "AbsIncorrect.abs": "// @ public normal_behavior\n// @ ensures a >= 0 ==> \\result == a;\n// @ ensures a <  0 ==> \\result == -a;\n// @ ensures \\result >= 0;",
    "StringConcat.concat": "//@ public normal_behavior\n//@ requires a != null;\n//@ requires b != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length() == a.length() + b.length();\n//@ ensures (\\forall int i; 0 <= i && i < a.length(); \\result.charAt(i) == a.charAt(i));\n//@ ensures (\\forall int j; 0 <= j && j < b.length(); \\result.charAt(a.length() + j) == b.charAt(j));",
    "IntSquareIncorrect.squareOf": "//@ public normal_behavior\n//@ ensures \\result == x * x",
    "CreditCardIncorrect.charge": "// requires amount >= 0;\n// ensures balance == \\old(balance) + amount;",
    "IntSquare.squareOf": "//@ public normal_behavior\n//@ ensures \\result == x * x",
    "CreditCard.charge": "//@ public normal_behavior\n//@ requires amount >= 0;\n//@ ensures balance == \\old(balance) + amount;",
    "FactorialIncorrect.factorial": "// public normal_behavior\n// requires n >= 0 && n <= 10;\n// ensures \\result == (\\product int i; 1 <= i && i <= n; i);\n// also public exceptional_behavior\n// requires n < 0 || n > 10;\n// signals (IllegalArgumentException e) n < 0 || n > 10;",
    "DigitRoot.digitRoot": "// requires number >= 0;\n// ensures \\result >= 0 && \\result <= 9;\n// signals (IllegalArgumentException e) number < 0;",
    "LeapYear.isLeapYear": "//@ public normal_behavior\n//@ ensures \\result <==> ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0));",
    "Factorial.factorial": "//@ requires 0 <= n && n <= 10\n//@ ensures (n == 0 && \\result == 1) || (n > 0 && \\result == (\\product int i; 1 <= i && i <= n; i))\n//@ also public exceptional_behavior\n//@ requires n < 0 || n > 10\n//@ signals (IllegalArgumentException) n < 0 || n > 10",
    "Palindrom.isPalindrom": "//@ public normal_behavior\n//@ requires s != null;\n//@ ensures \\result <==> (\\forall int i; 0 <= i && i < s.length(); s.charAt(i) == s.charAt(s.length() - 1 - i));",
    "LeapYearIncorrect.isLeapYear": "//@ public normal_behavior\n//@ ensures \\result == ((year % 4 == 0) && (year % 100 != 0 || year % 400 == 0));",
    "GenerateString.generateString": "// @public normal_behavior\n// @requires length >= 0;\n// @ensures \\result != null;\n// @ensures \\result.length() == length;\n// @ensures (\\forall int i; 0 <= i && i < length; \\result.charAt(i) - 'a' == i % 26);\n// @also public exceptional_behavior\n// @requires length < 0;\n// @signals (IllegalArgumentException e) length < 0;",
    "GenerateStringIncorrectLength.generateString": "// public normal_behavior\n// requires length >= 0;\n// ensures \\result != null;\n// ensures \\result.length() == length;\n// ensures (\\forall int i; 0 <= i && i < \\result.length(); \\result.charAt(i) - 'a' == i % 26);",
    "PalindromIncorrect.isPalindrom": "//@ public normal_behavior\n//@ requires s != null;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < s.length(); s.charAt(i) == s.charAt(s.length() - 1 - i));",
    "PrimeCheck.isPrime": "//@ public normal_behavior\n//@ ensures \\result == (n > 1 && (\\forall int i; 2 <= i && i < n; n % i != 0))",
    "SplitString.split": "// @requires s != null && 0 <= index && index <= s.length();\n// @ensures \\result != null;\n// @ensures \\result.length == 2;\n// @ensures \\result[0] != null;\n// @ensures \\result[1] != null;\n// @ensures \\result[0].length() == index;\n// @ensures \\result[1].length() == s.length() - index;\n// @ensures (\\forall int i; 0 <= i && i < index; \\result[0].charAt(i) == s.charAt(i));\n// @ensures (\\forall int j; index <= j && j < s.length(); \\result[1].charAt(j - index) == s.charAt(j));\n// @signals (NullPointerException e) s == null;\n// @signals (IndexOutOfBoundsException e) s != null && (index < 0 || index > s.length());",
    "StringLength.length": "//@ public normal_behavior\n//@ requires s != null\n//@ ensures \\result == s.length()",
    "StringLengthIncorrect.length": "//@ public normal_behavior\n//@ requires s != null\n//@ ensures \\result == s.length()",
    "PrimeNumberGenerator.generatePrimes": "// @ public normal_behavior\n// @ requires 0 <= n && n <= 20;\n// @ ensures \\result != null;\n// @ ensures (\\forall int i; 0 <= i && i < \\result.length; 2 <= \\result[i] && \\result[i] <= n && (\\forall int d; 2 <= d && d < \\result[i]; \\result[i] % d != 0));\n// @ ensures (\\forall int k; 2 <= k && k <= n && (\\forall int d; 2 <= d && d < k; k % d != 0); (\\exists int j; 0 <= j && j < \\result.length; \\result[j] == k));\n// @ also public exceptional_behavior\n// @ requires n < 0 || n > 20;\n// @ signals (IllegalArgumentException e) n < 0 || n > 20;",
    "SplitStringIncorrect.split": "// @ public normal_behavior\n// @ requires s != null;\n// @ requires 0 <= index && index <= s.length();\n// @ ensures \\result != null;\n// @ ensures \\result.length == 2;\n// @ ensures \\result[0] != null && \\result[1] != null;\n// @ ensures \\result[0].length() == index;\n// @ ensures \\result[1].length() == s.length() - index;\n// @ ensures s.length() == \\result[0].length() + \\result[1].length();",
    "ReverseStringIncorrect.reverse": "// @ public normal_behavior\n// @ requires s != null;\n// @ ensures \\result != null;\n// @ ensures \\result.length() == s.length();\n// @ ensures (\\forall int i; 0 <= i && i < s.length(); \\result.charAt(i) == s.charAt(s.length() - 1 - i));",
    "ReverseString.reverse": "// @ public normal_behavior\n// @ requires s != null\n// @ ensures \\result != null\n// @ ensures \\result.length() == s.length()\n// @ ensures (\\forall int i; 0 <= i && i < s.length(); \\result.charAt(i) == s.charAt(s.length() - 1 - i))",
    "ExceptionTestIncorrect.test": "// @ public normal_behavior\n// @ ensures \\result == a\n// @ also\n// @ public exceptional_behavior\n// @ requires a > 10\n// @ signals (IllegalArgumentException e) a > 10",
    "ExceptionTest.test": "// public normal_behavior\n// requires a <= 10;\n// ensures \\result == a;\n// also public exceptional_behavior\n// requires a > 10;\n// signals (IllegalArgumentException e) a > 10;",
    "TemperaturesIncorrect.convertTemperature": "//@ public normal_behavior\n//@ ensures \\result != null;\n//@ ensures \\result.length == 3;\n//@ ensures \\result[0] == celsius;\n//@ ensures \\result[1] == celsius + 273.15;\n//@ ensures \\result[2] == celsius * 9.0/5.0 + 32.0;",
    "Temperatures.convertTemperature": "//@ public normal_behavior\n//@ requires celsius >= -273.15;\n//@ ensures \\result != null;\n//@ ensures \\result.length == 3;\n//@ ensures \\result[0] == celsius;\n//@ ensures \\result[1] == celsius + 273.15;\n//@ ensures \\result[2] == celsius * 9.0/5.0 + 32.0;\n//@ also\n//@ public exceptional_behavior\n//@ requires celsius < -273.15;\n//@ signals (IllegalArgumentException e) celsius < -273.15;",
    "PrimeNumberGeneratorIncorrect.generatePrimes": "//@ public normal_behavior\n//@ requires n >= 0 && n <= 20;\n//@ ensures \\result != null;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \n//          2 <= \\result[i] && \\result[i] <= n \n//          && (\\forall int d; 2 <= d && d < \\result[i]; \\result[i] % d != 0));\n//@ ensures (\\forall int p; 2 <= p && p <= n \n//          && (\\forall int d2; 2 <= d2 && d2 < p; p % d2 != 0) \n//          ==> (\\exists int i; 0 <= i && i < \\result.length; \\result[i] == p));\n//@ ensures (\\forall int i,j; 0 <= i && i < j && j < \\result.length; \\result[i] < \\result[j]);\n//@ also public exceptional_behavior\n//@ requires n < 0 || n > 20;\n//@ signals (IllegalArgumentException e) n < 0 || n > 20;",
    "CopyOfRangeIncorrect.copyOfRange": "//@ requires original != null;\n//@ requires 0 <= from && from <= original.length;\n//@ requires from <= to;\n//@ ensures \\result != null;\n//@ ensures \\result.length == to - from;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length && from + i < original.length; \\result[i] == original[from + i]);\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length && from + i >= original.length; \\result[i] == 0);\n//@ signals (ArrayIndexOutOfBoundsException e) from < 0 || from > original.length;\n//@ signals (IllegalArgumentException e) from > to;",
    "CopyOfRange.copyOfRange": "//@ public normal_behavior\n//@ requires original != null;\n//@ requires 0 <= from && from <= original.length;\n//@ requires from <= to;\n//@ ensures \\result != null;\n//@ ensures \\result.length == to - from;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length && from + i < original.length; \\result[i] == original[from + i]);\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length && from + i >= original.length; \\result[i] == 0);\n//@ also public exceptional_behavior\n//@ requires original != null && (from < 0 || from > original.length);\n//@ signals (ArrayIndexOutOfBoundsException e) from < 0 || from > original.length;\n//@ also public exceptional_behavior\n//@ requires original != null && from > to;\n//@ signals (IllegalArgumentException e) from > to;",
    "CombineArray.combine": "// @requires a != null;\n// @requires b != null;\n// @ensures \\result != null;\n// @ensures \\result.length == a.length + b.length;\n// @ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i]);\n// @ensures (\\forall int j; 0 <= j && j < b.length; \\result[a.length + j] == b[j]);",
    "SubstringIncorrect.substring": "// @ public normal_behavior\n// @ requires s != null;\n// @ requires 0 <= start && start <= end && end <= s.length();\n// @ ensures \\result.length() == end - start;\n// @ ensures (\\forall int i; 0 <= i && i < \\result.length(); \\result.charAt(i) == s.charAt(start + i));\n// @ also\n// @ public exceptional_behavior\n// @ requires s != null && (start < 0 || end > s.length());\n// @ signals (IndexOutOfBoundsException e) start < 0 || end > s.length();\n// @ also\n// @ public exceptional_behavior\n// @ requires s != null && start > end;\n// @ signals (IllegalArgumentException e) start > end;",
    "BubbleSortIncorrect.bubbleSort": "//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] == \\old(arr[i]));\n//@ ensures (\\forall int i; 0 <= i+1 && i+1 < \\result.length; \\result[i] <= \\result[i+1]);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; (\\sum int j; 0 <= j && j < \\result.length; \\result[j] == arr[i] ? 1 : 0) == (\\sum int j; 0 <= j && j < arr.length; arr[j] == arr[i] ? 1 : 0));",
    "Pow.pow": "// @ public normal_behavior\n// @ requires 0 <= a && a <= 10 && 0 <= b && b <= 10;\n// @ ensures \\result == (\\product int i; 0 <= i && i < b; a);\n// @ also public exceptional_behavior\n// @ requires a < 0 || b < 0 || a > 10 || b > 10;\n// @ signals (IllegalArgumentException e) a < 0 || b < 0 || a > 10 || b > 10;",
    "StringIndexOf.indexOf": "//@ requires s != null;\n//@ ensures (\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ? \\result == \\min int i; 0 <= i && i < s.length() && s.charAt(i) == sub; i : \\result == -1;",
    "Withdraw.withdraw": "//@ public normal_behavior\n//@ requires balance >= 0\n//@ requires amount >= 0\n//@ requires amount <= balance\n//@ ensures \\result == balance - amount\n//@ also public exceptional_behavior\n//@ requires amount < 0\n//@ signals (IllegalArgumentException e) amount < 0\n//@ also public exceptional_behavior\n//@ requires amount > balance\n//@ signals (IllegalArgumentException e) amount > balance\n//@ also public exceptional_behavior\n//@ requires balance < 0\n//@ signals (IllegalArgumentException e) balance < 0\n//@ also public exceptional_behavior\n//@ requires balance - amount < 0\n//@ signals (IllegalArgumentException e) balance - amount < 0",
    "PrimeCheckIncorrect.isPrime": "//@ public normal_behavior\n//@ ensures \\result == (n > 1 && (\\forall int i; 2 <= i && i < n; n % i != 0));",
    "ParseBooleanIncorrect.parse": "// @ public normal_behavior\n// @ requires inputString != null;\n// @ requires (inputString.length() == 4 &&\n// @           ((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') &&\n// @            (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') &&\n// @            (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') &&\n// @            (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'))) ||\n// @          (inputString.length() == 5 &&\n// @           ((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') &&\n// @            (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') &&\n// @            (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') &&\n// @            (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') &&\n// @            (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E')));\n// @ ensures \\result == (inputString.length() == 4);\n// @ also\n// @ public exceptional_behavior\n// @ requires inputString == null || !((inputString.length() == 4 &&\n// @           ((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') &&\n// @            (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') &&\n// @            (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') &&\n// @            (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'))) ||\n// @          (inputString.length() == 5 &&\n// @           ((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') &&\n// @            (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') &&\n// @            (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') &&\n// @            (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') &&\n// @            (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E'))));\n// @ signals (IllegalArgumentException e) inputString == null || !((inputString.length() == 4 &&\n// @           ((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') &&\n// @            (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') &&\n// @            (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') &&\n// @            (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'))) ||\n// @          (inputString.length() == 5 &&\n// @           ((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') &&\n// @            (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') &&\n// @            (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') &&\n// @            (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') &&\n// @            (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E'))));",
    "Substring.substring": "//@ requires s != null\n//@ requires 0 <= start && start <= end && end <= s.length()\n//@ ensures \\result.length() == end - start\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length(); \\result.charAt(i) == s.charAt(start + i))\n//@ signals (IndexOutOfBoundsException e) start < 0 || end > s.length()\n//@ signals (IllegalArgumentException e) start > end",
    "ComputeArea.computeArea": "//@ public normal_behavior\n//@ requires ax1 <= ax2;\n//@ requires ay1 <= ay2;\n//@ ensures \\result == (ax2 - ax1) * (ay2 - ay1);",
    "WithdrawIncorrect.withdraw": "// @ public normal_behavior\n// @ requires balance >= 0;\n// @ requires amount >= 0;\n// @ requires amount <= balance;\n// @ ensures \\result == balance - amount;\n// @ also\n// @ public exceptional_behavior\n// @ requires amount < 0;\n// @ signals (IllegalArgumentException e) amount < 0;\n// @ also\n// @ public exceptional_behavior\n// @ requires amount > balance;\n// @ signals (IllegalArgumentException e) amount > balance;\n// @ also\n// @ public exceptional_behavior\n// @ requires balance < 0;\n// @ signals (IllegalArgumentException e) balance < 0;\n// @ also\n// @ public exceptional_behavior\n// @ requires balance - amount < 0;\n// @ signals (IllegalArgumentException e) balance - amount < 0;",
    "ParseBoolean.parse": "// public normal_behavior\n// requires inputString != null;\n// requires inputString.length() == 4 || inputString.length() == 5;\n// ensures inputString.length() == 4 ==> \\result == true;\n// ensures inputString.length() == 5 ==> \\result == false;\n// also public exceptional_behavior\n// requires inputString == null || (inputString.length() != 4 && inputString.length() != 5);\n// signals (IllegalArgumentException e) inputString == null || (inputString.length() != 4 && inputString.length() != 5);",
    "GreatestCommonDivisorIncorrect.getGreatestCommonDivisor": "// @ public normal_behavior\n// @ ensures (y1 > 0 && y2 > 0) ==> (\\result > 0 && y1 % \\result == 0 && y2 % \\result == 0 && (\\forall int d; d > 0 && y1 % d == 0 && y2 % d == 0; d <= \\result));\n// @ ensures (y1 <= 0 || y2 <= 0) ==> \\result == 0;",
    "GreatestCommonDivisor.getGreatestCommonDivisor": "// @ public normal_behavior\n// @ requires y1 <= 0 || y2 <= 0;\n// @ ensures \\result == 0;\n// @ also\n// @ public normal_behavior\n// @ requires y1 > 0 && y2 > 0;\n// @ ensures \\result > 0;\n// @ ensures y1 % \\result == 0 && y2 % \\result == 0;\n// @ ensures (\\forall int k; k > 0 && y1 % k == 0 && y2 % k == 0; k <= \\result);"
}