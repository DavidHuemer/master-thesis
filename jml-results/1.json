{
    "DistinctArrayIncorrect.isDistinct": "```\n//@ requires arr != null;\n//@ ensures \\result == (\\forall int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j; arr[i] != arr[j]);\n```",
    "LastIndexOfIncorrect.lastIndexOf": "```\n//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> \\result == (\\max int i; 0 <= i && i < arr.length && arr[i] == element; i);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> \\result == -1;\n```",
    "SetZero.setZero": "```java\n//@ public normal_behavior\n//@ requires a != null;\n//@ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n//@ ensures \\result.length == a.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; (i < iBegin || i > iEnd) ==> \\result[i] == a[i]);\n//@ ensures (\\forall int i; iBegin <= i && i <= iEnd; \\result[i] == 0);\n//@ ensures (\\forall int i; 0 <= i && i < a.length; a[i] == \\old(a[i]));\n```",
    "IsAscending.isAscending": "```java\n//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i + 1]) ==> \\result == true;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i + 1]) ==> \\result == false;\n//@ ensures arr.length < 2 ==> \\result == true;\n```",
    "IndexOfIncorrect.find": "```java\n//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures \\result == (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ? (\\min int i; 0 <= i && i < arr.length && arr[i] == target; i) : -1;\n```",
    "IsAscendingIncorrect.isAscending": "```java\n//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures \\result == ((arr.length < 2) || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] < arr[i + 1]));\n```",
    "IsDescending.isDescending": "```java\n//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures arr.length < 2 ==> \\result == true;\n//@ ensures (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] > arr[i + 1]) ==> \\result == true;\n//@ ensures \\result == false <==> (\\exists int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i + 1]);\n```",
    "IsDescendingIncorrect.isDescending": "```java\n//@ requires arr != null;\n//@ ensures \\result == (arr.length < 2 || (\\forall int i; 0 <= i && i < arr.length - 1; arr[i] > arr[i + 1]));\n```",
    "ReverseArrayIncorrect.reverse": "```\n//@ public normal_behavior\n//@ requires a != null;\n//@ ensures a.length == \\result.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[(a.length - 1) - i]);\n```",
    "RemoveElementsIncorrect.removeElement": "```\n//@ requires arr != null;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \\result[i] != b);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; (arr[i] != b) == (\\exists int j; 0 <= j && j < \\result.length; \\result[j] == arr[i]));\n```",
    "ReverseArray.reverse": "```java\n//@ requires a != null;\n//@ ensures a.length == \\result.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[a.length - i - 1]);\n```",
    "RemoveElements.removeElement": "```\n//@ requires arr != null;\n//@ ensures \\result.length == (\\sum int i; 0 <= i && i < arr.length; arr[i] != b ? 1 : 0);\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \\result[i] != b);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; (arr[i] != b) ==> (\\exists int j; 0 <= j && j < \\result.length; \\result[j] == arr[i]));\n```",
    "SetZeroIncorrectLength.setZero": "```java\n//@ public normal_behavior\n//@ requires a != null;\n//@ requires 0 <= iBegin && iBegin <= iEnd && iEnd < a.length;\n//@ ensures \\result.length == a.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \n//@          (iBegin <= i && i <= iEnd) ? \\result[i] == 0 : \\result[i] == a[i]);\n```",
    "ContainsDuplicateIncorrect.containsDuplicate": "```\n//@ public normal_behavior\n//@ requires nums != null;\n//@ ensures \\result == (\\exists int i, j; 0 <= i && i < nums.length && 0 <= j && j < nums.length && i != j; nums[i] == nums[j]);\n```",
    "ContainsDuplicate.containsDuplicate": "```\n//@ requires nums != null;\n//@ ensures \\result == (\\exists int i, j; 0 <= i && i < nums.length && 0 <= j && j < nums.length && i != j; nums[i] == nums[j]);\n```",
    "LastIndexOf.lastIndexOf": "```jml\n//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> \n//@         \\result == (\\max int j; 0 <= j && j < arr.length && arr[j] == element; j);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == element) ==> \n//@         \\result == -1;\n```",
    "CompareArrayIncorrect.compare": "```java\n//@ public normal_behavior\n//@ requires a != null && b != null;\n//@ ensures (\\result == true) <==> (a.length == b.length && (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]));\n```",
    "DistinctArray.isDistinct": "```java\n//@ requires arr != null;\n//@ ensures \\result == (\\forall int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j; arr[i] != arr[j]);\n```",
    "FindFirstZeroIncorrect.findFirstZero": "```\n//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == (\\min int j; 0 <= j && j < arr.length && arr[j] == 0; j);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == 0) ==> \\result == -1;\n```",
    "FindFirstZero.findFirstZero": "```\n//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures \\result == -1 || (0 <= \\result && \\result < arr.length && arr[\\result] == 0);\n//@ ensures \\result == -1 <==> (\\forall int i; 0 <= i && i < arr.length; arr[i] != 0);\n//@ ensures \\result != -1 ==> (\\forall int i; 0 <= i && i < \\result; arr[i] != 0);\n```",
    "Smallest.smallest": "```java\n//@ public normal_behavior\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (\\exists int i; 0 <= i && i < a.length; a[i] == \\result);\n//@ ensures a.length > 0 ==> (\\forall int i; 0 <= i && i < a.length; \\result <= a[i]);\n```",
    "BubbleSort.bubbleSort": "```java\n//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < arr.length; \\result[j] == arr[i]));\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] <= \\result[i + 1]);\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; arr[i] == \\old(arr[i]));\n```",
    "BiggestIncorrect.biggest": "```java\n//@ public normal_behavior\n//@ requires a != null;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; a[\\result] >= a[i]) && (a.length > 0 ==> 0 <= \\result < a.length);\n//@ ensures a.length == 0 ==> \\result == -1;\n```",
    "CombineArrayIncorrect.combine": "```\n//@ requires a != null && b != null;\n//@ ensures \\result.length == a.length + b.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i]);\n//@ ensures (\\forall int i; 0 <= i && i < b.length; \\result[i + a.length] == b[i]);\n```",
    "Biggest.biggest": "```java\n//@ public normal_behavior\n//@ requires a != null;\n//@ ensures a.length == 0 ==> \\result == -1;\n//@ ensures a.length > 0 ==> (\\exists int i; 0 <= i && i < a.length; \\result == a[i] && (\\forall int j; 0 <= j && j < a.length; a[j] <= a[i]));\n```",
    "AddCorrect.add": "```\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == a + b;\n```",
    "IsCommonFactorIncorrect.isCommonFactor": "```java\n//@ public normal_behavior\n//@ requires a >= 1 && b >= 1 && factor >= 1;\n//@ ensures \\result == (a % factor == 0 && b % factor == 0);\n//@ also public exceptional_behavior\n//@ requires factor < 1;\n//@ signals (IllegalArgumentException e) factor < 1;\n```",
    "SmallestIncorrect.smallest": "```java\n//@ public normal_behavior\n//@ requires a != null;\n//@ ensures a.length > 0 ==> \\result == (\\min int i; 0 <= i && i < a.length; a[i]);\n//@ ensures a.length == 0 ==> \\result == -1;\n```",
    "AddIncorrect.add": "```jml\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == a + b;\n```",
    "IsCommonFactor.isCommonFactor": "```\n//@ public normal_behavior\n//@ requires factor >= 1;\n//@ ensures \\result == ((a % factor == 0) && (b % factor == 0));\n//@ also public exceptional_behavior\n//@ requires factor < 1;\n//@ signals_only IllegalArgumentException;\n```",
    "IndexOf.find": "```jml\n//@ public normal_behavior\n//@ requires arr != null;\n//@ ensures (\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == (\\min int i; 0 <= i && i < arr.length && arr[i] == target; i);\n//@ ensures !(\\exists int i; 0 <= i && i < arr.length; arr[i] == target) ==> \\result == -1;\n```",
    "AddWithMax.addWithMax": "```\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == a + b;\n//@ also public exceptional_behavior\n//@ requires a + b > 2000;\n//@ signals (IllegalArgumentException e) a + b > 2000;\n```",
    "AddWithMaxIncorrect.addWithMax": "```\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == a + b && \\result <= 2000;\n//@ also\n//@ public exceptional_behavior\n//@ requires a + b > 2000;\n//@ signals (IllegalArgumentException e) a + b > 2000;\n```",
    "DartIncorrect.calculateScore": "```java\n//@ public normal_behavior\n//@ requires 1 <= number && number <= 20;\n//@ requires 1 <= region && region <= 3;\n//@ requires 0 <= currentScore && currentScore <= 501;\n//@ ensures (currentScore - (number * region) >= 0) ==> \\result == currentScore - (number * region);\n//@ ensures (currentScore - (number * region) < 0) ==> \\result == currentScore;\n//@ also\n//@ public exceptional_behavior\n//@ requires number < 1 || number > 20 || region < 1 || region > 3;\n//@ signals (IllegalArgumentException e) number < 1 || number > 20 || region < 1 || region > 3;\n```",
    "DivideIncorrect.divide": "```java\n//@ public normal_behavior\n//@ requires b != 0;\n//@ ensures \\result == a / b;\n//@ also\n//@ public exceptional_behavior\n//@ requires b == 0;\n//@ signals (IllegalArgumentException e) b == 0;\n```",
    "Dart.calculateScore": "```java\n//@ public normal_behavior\n//@ requires 1 <= number && number <= 20;\n//@ requires 1 <= region && region <= 3;\n//@ requires 0 <= currentScore && currentScore <= 501;\n//@ ensures (currentScore - number * region >= 0) ==> \\result == currentScore - number * region;\n//@ ensures (currentScore - number * region < 0) ==> \\result == currentScore;\n//@ also public exceptional_behavior\n//@ requires !(1 <= number && number <= 20) || !(1 <= region && region <= 3);\n//@ signals (IllegalArgumentException e) !(1 <= number && number <= 20) || !(1 <= region && region <= 3);\n```",
    "MultiplyCorrect.multiply": "```\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == a * b;\n```",
    "MultiplyInCorrect.multiply": "```java\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == a * b;\n```",
    "Divide.divide": "```java\n//@ public normal_behavior\n//@ requires b != 0;\n//@ ensures \\result == a / b;\n//@ also public exceptional_behavior\n//@ requires b == 0;\n//@ signals (IllegalArgumentException e) b == 0;\n```",
    "CompareArray.compare": "```java\n//@ public normal_behavior\n//@ requires a != null && b != null;\n//@ ensures \\result == (a.length == b.length && (\\forall int i; 0 <= i && i < a.length; a[i] == b[i]));\n```",
    "SubtractCorrect.subtract": "```\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == a - b;\n```",
    "SubtractInvalidOrder.subtract": "```java\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == a - b;\n```",
    "Conjunction.conjunctOf": "```java\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == (b1 && b2);\n```",
    "PowIncorrect.pow": "```java\n//@ public normal_behavior\n//@ requires a >= 0 && b >= 0;\n//@ requires a <= 10 && b <= 10;\n//@ ensures (b == 0) ==> (\\result == 1);\n//@ ensures (b > 0) ==> (\\result == (\\product int i; 1 <= i && i <= b; a));\n//@ also\n//@ public exceptional_behavior\n//@ requires a < 0 || b < 0;\n//@ signals (IllegalArgumentException e) a < 0 || b < 0;\n//@ also\n//@ public exceptional_behavior\n//@ requires a > 10 || b > 10;\n//@ signals (IllegalArgumentException e) a > 10 || b > 10;\n```",
    "ConjunctionIncorrect.conjunctOf": "```\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == (b1 && b2);\n```",
    "Disjunction.disjunctOf": "```\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == (b1 || b2);\n```",
    "CompareIntIncorrect.compareInt": "```java\n//@ public normal_behavior\n//@ requires true;\n//@ ensures (a == b && \\result == 0) || \n//@         (a > b && \\result > 0) || \n//@         (a < b && \\result < 0);\n```",
    "DisjunctionIncorrect.disjunctOf": "```\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == (b1 || b2);\n```",
    "XOR.xor": "```\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == ((b1 && !b2) || (!b1 && b2));\n```",
    "XORIncorrect.xor": "```\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == (b1 && !b2) || (!b1 && b2);\n```",
    "CompareInt.compareInt": "```java\n//@ public normal_behavior\n//@ requires true;\n//@ ensures (a == b && \\result == 0) || (a > b && \\result > 0) || (a < b && \\result < 0);\n```",
    "RandomInt.randomInt": "```\n//@ public normal_behavior\n//@ requires min <= max;\n//@ ensures min <= \\result && \\result <= max;\n//@ also\n//@ public exceptional_behavior\n//@ requires min > max;\n//@ signals (IllegalArgumentException e) min > max;\n```",
    "RandomIntIncorrect.randomInt": "```java\n//@ public normal_behavior\n//@ requires min <= max;\n//@ ensures \\result >= min && \\result <= max;\n//@ also\n//@ public exceptional_behavior\n//@ requires min > max;\n//@ signals (IllegalArgumentException e) min > max;\n```",
    "StringIndexOfIncorrect.indexOf": "```java\n//@ public normal_behavior\n//@ requires s != null;\n//@ ensures (\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result == (\\min int i; 0 <= i && i < s.length(); s.charAt(i) == sub);\n//@ ensures (\\forall int i; 0 <= i && i < s.length(); s.charAt(i) != sub) ==> \\result == -1;\n```",
    "AbsCorrect.abs": "```\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "StringConcatIncorrect.concat": "```\n//@ public normal_behavior\n//@ requires a != null && b != null;\n//@ ensures \\result.equals(a + b);\n```",
    "ComputeAreaIncorrect.computeArea": "// public normal_behavior\n// requires ax1 <= ax2;\n// requires ay1 <= ay2;\n// ensures \\result == (ax2 - ax1) * (ay2 - ay1);",
    "AbsIncorrect.abs": "```\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == (a >= 0 ? a : -a);\n```",
    "StringConcat.concat": "```java\n//@ public normal_behavior\n//@ requires a != null && b != null;\n//@ ensures \\result.equals(a.concat(b));\n```",
    "IntSquareIncorrect.squareOf": "```java\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == x * x;\n```",
    "CreditCardIncorrect.charge": "```java\n//@ public normal_behavior\n//@ requires amount >= 0;\n//@ ensures balance == \\old(balance) + amount;\n```",
    "IntSquare.squareOf": "```jml\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == x * x;\n```",
    "CreditCard.charge": "```\n//@ public normal_behavior\n//@ requires amount >= 0;\n//@ ensures \\old(balance) + amount == balance;\n```",
    "FactorialIncorrect.factorial": "```java\n//@ public normal_behavior\n//@ requires n >= 0 && n <= 10;\n//@ ensures \\result == (n == 0 ? 1 : (\\product int i; 1 <= i && i <= n; i));\n//@ also public exceptional_behavior\n//@ requires n < 0 || n > 10;\n//@ signals (IllegalArgumentException e) n < 0 || n > 10;\n```",
    "DigitRoot.digitRoot": "```java\n//@ public normal_behavior\n//@ requires number >= 0;\n//@ ensures (\\result >= 0 && \\result <= 9);\n//@ ensures (\\exists int originalNumber; originalNumber == number; \n//@     \\result == (originalNumber == 0 ? 0 : (1 + (originalNumber - 1) % 9)));\n//@ also public exceptional_behavior\n//@ requires number < 0;\n//@ signals_only IllegalArgumentException;\n//@ signals (IllegalArgumentException e) number < 0;\n```",
    "LeapYear.isLeapYear": "```\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result == ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0));\n```",
    "Factorial.factorial": "```java\n//@ public normal_behavior\n//@ requires n >= 0 && n <= 10;\n//@ ensures \\result == (n == 0 ? 1 : (\\product int i; 1 <= i && i <= n; i));\n//@ also\n//@ public exceptional_behavior\n//@ requires n < 0 || n > 10;\n//@ signals (IllegalArgumentException e) n < 0 || n > 10;\n```",
    "Palindrom.isPalindrom": "```java\n//@ public normal_behavior\n//@ requires s != null;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < s.length()/2; s.charAt(i) == s.charAt(s.length() - i - 1));\n```",
    "LeapYearIncorrect.isLeapYear": "```\n//@ public normal_behavior\n//@ requires true;\n//@ ensures (\\result == true) <==> ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0));\n```",
    "GenerateString.generateString": "```java\n//@ public normal_behavior\n//@ requires length >= 0;\n//@ ensures \\result.length() == length;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length(); 'a' <= \\result.charAt(i) && \\result.charAt(i) <= 'z');\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length(); \\result.charAt(i) == 'a' + (i % 26));\n```",
    "GenerateStringIncorrectLength.generateString": "```java\n//@ public normal_behavior\n//@ requires length >= 0;\n//@ ensures \\result.length() == length;\n//@ ensures (\\forall int i; 0 <= i && i < length; \\result.charAt(i) >= 'a' && \\result.charAt(i) <= 'z');\n```",
    "PalindromIncorrect.isPalindrom": "```java\n//@ public normal_behavior\n//@ requires s != null;\n//@ ensures \\result == (\\forall int i; 0 <= i && i < s.length() / 2; s.charAt(i) == s.charAt(s.length() - 1 - i));\n```",
    "PrimeCheck.isPrime": "```java\n//@ public normal_behavior\n//@ requires n >= 2;\n//@ ensures \\result == (\\forall int i; 2 <= i && i * i <= n; n % i != 0);\n//@ also\n//@ public normal_behavior\n//@ requires n < 2;\n//@ ensures \\result == false;\n```",
    "SplitString.split": "```java\n//@ public normal_behavior\n//@ requires s != null;\n//@ requires 0 <= index && index <= s.length();\n//@ ensures \\result.length == 2;\n//@ ensures \\result[0].equals(s.substring(0, index));\n//@ ensures \\result[1].equals(s.substring(index, s.length()));\n```",
    "StringLength.length": "```java\n//@ public normal_behavior\n//@ requires s != null;\n//@ ensures \\result == s.length();\n```",
    "StringLengthIncorrect.length": "```java\n//@ public normal_behavior\n//@ requires s != null;\n//@ ensures \\result == s.length();\n```",
    "PrimeNumberGenerator.generatePrimes": "```java\n//@ public normal_behavior\n//@ requires 0 <= n && n <= 20;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \n//@          (\\forall int j; 2 <= j && j < \\result[i]; \\result[i] % j != 0));\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] < \\result[i + 1]);\n//@ also\n//@ public exceptional_behavior\n//@ requires n < 0 || n > 20;\n//@ signals (IllegalArgumentException e) n < 0 || n > 20;\n```",
    "SplitStringIncorrect.split": "```java\n//@ public normal_behavior\n//@ requires s != null;\n//@ requires 0 <= index && index <= s.length();\n//@ ensures \\result.length == 2;\n//@ ensures \\result[0].equals(s.substring(0, index));\n//@ ensures \\result[1].equals(s.substring(index, s.length()));\n```",
    "ReverseStringIncorrect.reverse": "```\n//@ public normal_behavior\n//@ requires s != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length() == s.length();\n//@ ensures (\\forall int i; 0 <= i && i < s.length(); \\result.charAt(i) == s.charAt(s.length() - 1 - i));\n```",
    "ReverseString.reverse": "```java\n//@ requires s != null;\n//@ ensures \\result != null;\n//@ ensures \\result.length() == s.length();\n//@ ensures (\\forall int i; 0 <= i && i < s.length(); \\result.charAt(i) == s.charAt(s.length() - 1 - i));\n```",
    "ExceptionTestIncorrect.test": "```\n//@ public normal_behavior\n//@ requires a <= 10;\n//@ ensures \\result == a;\n//@ also public exceptional_behavior\n//@ requires a > 10;\n//@ signals (IllegalArgumentException e) a > 10;\n```",
    "ExceptionTest.test": "```\n//@ public normal_behavior\n//@ requires a <= 10;\n//@ ensures \\result == a;\n//@ also\n//@ public exceptional_behavior\n//@ requires a > 10;\n//@ signals (IllegalArgumentException e) a > 10;\n```",
    "TemperaturesIncorrect.convertTemperature": "```java\n//@ public normal_behavior\n//@ requires true;\n//@ ensures \\result.length == 3;\n//@ ensures \\result[0] == celsius;\n//@ ensures \\result[1] == celsius + 273.15;\n//@ ensures \\result[2] == (celsius * 9 / 5) + 32;\n```",
    "Temperatures.convertTemperature": "```java\n//@ public normal_behavior\n//@ requires celsius >= -273.15;\n//@ ensures \\result.length == 3;\n//@ ensures \\result[0] == celsius;\n//@ ensures \\result[1] == celsius + 273.15;\n//@ ensures \\result[2] == celsius * 9 / 5 + 32;\n//@ also\n//@ public exceptional_behavior\n//@ requires celsius < -273.15;\n//@ signals (IllegalArgumentException e) celsius < -273.15;\n```",
    "PrimeNumberGeneratorIncorrect.generatePrimes": "```\n//@ public normal_behavior\n//@ requires 0 <= n && n <= 20;\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length; \n//@          (\\forall int j; 2 <= j && j < \\result[i]; \\result[i] % j != 0));\n//@ ensures \\result.length > 0 ==> \\result[\\result.length - 1] <= n;\n//@ also\n//@ public exceptional_behavior\n//@ requires n < 0 || n > 20;\n//@ signals (IllegalArgumentException e) n < 0 || n > 20;\n```",
    "CopyOfRangeIncorrect.copyOfRange": "```java\n//@ public normal_behavior\n//@ requires original != null;\n//@ requires 0 <= from && from <= original.length;\n//@ requires from <= to;\n//@ ensures \\result.length == to - from;\n//@ ensures (\\forall int i; 0 <= i && i < to - from;\n//@     (from + i < original.length ? \\result[i] == original[from + i] : \\result[i] == 0));\n//@ also\n//@ public exceptional_behavior\n//@ requires original != null && (from < 0 || from > original.length);\n//@ signals (ArrayIndexOutOfBoundsException e) from < 0 || from > original.length;\n//@ also\n//@ public exceptional_behavior\n//@ requires original != null && from > to;\n//@ signals (IllegalArgumentException e) from > to;\n```",
    "CopyOfRange.copyOfRange": "```java\n//@ public normal_behavior\n//@ requires original != null;\n//@ requires 0 <= from && from <= original.length;\n//@ requires from <= to;\n//@ ensures \\result.length == to - from;\n//@ ensures (\\forall int i; 0 <= i && i < to - from;\n//@     (from + i < original.length ? \\result[i] == original[from + i] : \\result[i] == 0));\n//@ also\n//@ public exceptional_behavior\n//@ requires from < 0 || from > original.length;\n//@ signals (ArrayIndexOutOfBoundsException e) from < 0 || from > original.length;\n//@ also\n//@ public exceptional_behavior\n//@ requires from > to;\n//@ signals (IllegalArgumentException e) from > to;\n```",
    "CombineArray.combine": "```java\n//@ public normal_behavior\n//@ requires a != null && b != null;\n//@ ensures \\result.length == a.length + b.length;\n//@ ensures (\\forall int i; 0 <= i && i < a.length; \\result[i] == a[i]); \n//@ ensures (\\forall int j; 0 <= j && j < b.length; \\result[a.length + j] == b[j]);\n```",
    "SubstringIncorrect.substring": "```java\n//@ public normal_behavior\n//@ requires s != null;\n//@ requires 0 <= start && start <= end && end <= s.length();\n//@ ensures \\result.equals(s.substring(start, end));\n//@ also\n//@ public exceptional_behavior\n//@ requires s == null || start < 0 || end > s.length() || start > end;\n//@ signals (IndexOutOfBoundsException e) (s != null && (start < 0 || end > s.length()));\n//@ signals (IllegalArgumentException e) (s != null && start > end);\n```",
    "BubbleSortIncorrect.bubbleSort": "```\n//@ requires arr != null;\n//@ ensures \\result != arr;\n//@ ensures \\result.length == arr.length;\n//@ ensures (\\forall int i; 0 <= i && i < arr.length; (\\exists int j; 0 <= j && j < arr.length; \\result[j] == arr[i]));\n//@ ensures (\\forall int i; 0 <= i && i < \\result.length - 1; \\result[i] <= \\result[i + 1]);\n```",
    "Pow.pow": "```java\n//@ public normal_behavior\n//@ requires a >= 0 && b >= 0;\n//@ requires a <= 10 && b <= 10;\n//@ ensures (b == 0) ==> (\\result == 1);\n//@ ensures (b != 0) ==> (\\result == (\\product int i; 1 <= i && i <= b; a));\n//@ also public exceptional_behavior\n//@ requires a < 0 || b < 0;\n//@ signals (IllegalArgumentException e) a < 0 || b < 0;\n//@ also public exceptional_behavior\n//@ requires a > 10 || b > 10;\n//@ signals (IllegalArgumentException e) a > 10 || b > 10;\n```",
    "StringIndexOf.indexOf": "```java\n//@ public normal_behavior\n//@ requires s != null;\n//@ ensures (\\exists int i; 0 <= i && i < s.length(); s.charAt(i) == sub) ==> \\result == (\\min int i; 0 <= i && i < s.length() && s.charAt(i) == sub; i);\n//@ ensures (\\forall int i; 0 <= i && i < s.length(); s.charAt(i) != sub) ==> \\result == -1;\n```",
    "Withdraw.withdraw": "```java\n//@ public normal_behavior\n//@ requires balance >= 0;\n//@ requires amount >= 0;\n//@ requires amount <= balance;\n//@ ensures \\result == balance - amount;\n//@ also\n//@ public exceptional_behavior\n//@ requires amount < 0 || amount > balance || balance < 0 || (balance - amount) < 0;\n//@ signals (IllegalArgumentException e) amount < 0 || amount > balance || balance < 0 || (balance - amount) < 0;\n```",
    "PrimeCheckIncorrect.isPrime": "```java\n//@ public normal_behavior\n//@ requires n > 1;\n//@ ensures \\result == (\\forall int i; 2 <= i && i < n; n % i != 0);\n//@ also\n//@ public exceptional_behavior\n//@ requires n <= 1;\n//@ ensures \\result == false;\n```",
    "ParseBooleanIncorrect.parse": "```java\n//@ public normal_behavior\n//@ requires inputString != null;\n//@ requires (inputString.length() == 4 && ((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') && (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') && (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') && (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'))) || \n//@          (inputString.length() == 5 && ((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') && (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') && (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') && (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') && (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E')));\n//@ ensures (\\result == true && (inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') && (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') && (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') && (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E')) ||\n//@         (\\result == false && (inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') && (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') && (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') && (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') && (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E'));\n//@ also\n//@ public exceptional_behavior\n//@ requires inputString == null || !((inputString.length() == 4 && ((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') && (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') && (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') && (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'))) || \n//@                                 (inputString.length() == 5 && ((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') && (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') && (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') && (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') && (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E'))));\n//@ signals (IllegalArgumentException e) inputString == null || !((inputString.length() == 4 && ((inputString.charAt(0) == 't' || inputString.charAt(0) == 'T') && (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R') && (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U') && (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'))) || \n//@                              (inputString.length() == 5 && ((inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F') && (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A') && (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L') && (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S') && (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E'))));\n```",
    "Substring.substring": "```java\n//@ public normal_behavior\n//@ requires s != null;\n//@ requires 0 <= start && start <= end && end <= s.length();\n//@ ensures \\result.equals(s.substring(start, end));\n//@ also\n//@ public exceptional_behavior\n//@ requires start < 0 || end > s.length();\n//@ signals (IndexOutOfBoundsException e) start < 0 || end > s.length();\n//@ also\n//@ public exceptional_behavior\n//@ requires start > end;\n//@ signals (IllegalArgumentException e) start > end;\n```",
    "ComputeArea.computeArea": "```java\n//@ public normal_behavior\n//@ requires ax1 != null;\n//@ requires ay1 != null;\n//@ requires ax2 != null;\n//@ requires ay2 != null;\n//@ ensures \\result == ((ax2 >= ax1 ? ax2 - ax1 : ax1 - ax2) * (ay2 >= ay1 ? ay2 - ay1 : ay1 - ay2));\n```",
    "WithdrawIncorrect.withdraw": "```java\n//@ public normal_behavior\n//@ requires balance >= 0;\n//@ requires amount >= 0;\n//@ requires amount <= balance;\n//@ ensures \\result == balance - amount;\n//@ also public exceptional_behavior\n//@ requires amount < 0;\n//@ signals (IllegalArgumentException e) amount < 0;\n//@ also public exceptional_behavior\n//@ requires amount > balance;\n//@ signals (IllegalArgumentException e) amount > balance;\n//@ also public exceptional_behavior\n//@ requires balance < 0;\n//@ signals (IllegalArgumentException e) balance < 0;\n//@ also public exceptional_behavior\n//@ requires balance - amount < 0;\n//@ signals (IllegalArgumentException e) balance - amount < 0;\n```",
    "ParseBoolean.parse": "```java\n//@ public normal_behavior\n//@ requires inputString != null;\n//@ requires (inputString.length() == 4 && (inputString.charAt(0) == 't' || inputString.charAt(0) == 'T')\n//@         && (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R')\n//@         && (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U')\n//@         && (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'))\n//@      || (inputString.length() == 5 && (inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F')\n//@         && (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A')\n//@         && (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L')\n//@         && (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S')\n//@         && (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E'));\n//@ ensures (\\result == true) <==> (inputString.length() == 4 && (inputString.charAt(0) == 't' || inputString.charAt(0) == 'T')\n//@                                 && (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R')\n//@                                 && (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U')\n//@                                 && (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'));\n//@ ensures (\\result == false) <==> (inputString.length() == 5 && (inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F')\n//@                                  && (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A')\n//@                                  && (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L')\n//@                                  && (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S')\n//@                                  && (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E'));\n//@ also public exceptional_behavior\n//@ requires inputString == null || !((inputString.length() == 4 && (inputString.charAt(0) == 't' || inputString.charAt(0) == 'T')\n//@                                 && (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R')\n//@                                 && (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U')\n//@                                 && (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'))\n//@                             || (inputString.length() == 5 && (inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F')\n//@                                 && (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A')\n//@                                 && (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L')\n//@                                 && (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S')\n//@                                 && (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E')));\n//@ signals (IllegalArgumentException e) inputString == null || !((inputString.length() == 4 && (inputString.charAt(0) == 't' || inputString.charAt(0) == 'T')\n//@                                                               && (inputString.charAt(1) == 'r' || inputString.charAt(1) == 'R')\n//@                                                               && (inputString.charAt(2) == 'u' || inputString.charAt(2) == 'U')\n//@                                                               && (inputString.charAt(3) == 'e' || inputString.charAt(3) == 'E'))\n//@                                                           || (inputString.length() == 5 && (inputString.charAt(0) == 'f' || inputString.charAt(0) == 'F')\n//@                                                               && (inputString.charAt(1) == 'a' || inputString.charAt(1) == 'A')\n//@                                                               && (inputString.charAt(2) == 'l' || inputString.charAt(2) == 'L')\n//@                                                               && (inputString.charAt(3) == 's' || inputString.charAt(3) == 'S')\n//@                                                               && (inputString.charAt(4) == 'e' || inputString.charAt(4) == 'E')));\n```"
}